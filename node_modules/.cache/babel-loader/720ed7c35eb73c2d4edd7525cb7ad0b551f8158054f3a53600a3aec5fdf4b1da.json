{"ast":null,"code":"var _jsxFileName = \"/Users/obs-fa/Downloads/Front End/src/components/ViewLogs.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { cn } from '../utils/helpers';\nimport { DUMMY_PROJECTS, DUMMY_USERS } from '../constants/dummyData';\nimport { SAMPLE_LOG_DATA } from '../constants/sampleLogData';\nimport { timesheetService } from '../services';\nimport { Loader2, AlertCircle } from 'lucide-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ViewLogs = () => {\n  _s();\n  const [searchParams] = useSearchParams();\n  const preSelectedUserId = searchParams.get('user');\n  const preSelectedUserName = searchParams.get('name');\n  const [selectedUserId, setSelectedUserId] = useState(preSelectedUserId ? parseInt(preSelectedUserId) : 0);\n\n  // Date range state - default to current month\n  const getCurrentMonthRange = () => {\n    const now = new Date();\n    const firstDay = new Date(now.getFullYear(), now.getMonth(), 1);\n    return {\n      startDate: firstDay.toISOString().split('T')[0],\n      endDate: now.toISOString().split('T')[0]\n    };\n  };\n  const [dateRange, setDateRange] = useState(getCurrentMonthRange());\n\n  // API state management\n  const [timeLogs, setTimeLogs] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [useRealData, setUseRealData] = useState(false); // Default to demo data since API endpoints may not exist\n  const [apiAvailable, setApiAvailable] = useState(null); // Track if API is available\n\n  // Get all unique user IDs from sample data\n  const allUserIds = Array.from(new Set(SAMPLE_LOG_DATA.map(log => log.userId)));\n\n  // Get all user IDs from DUMMY_USERS (including those without logs)\n  const allUserIdsFromDummy = DUMMY_USERS.map(user => parseInt(user.id));\n\n  // Helper function to get user name from ID\n  const getUserNameById = userId => {\n    const userData = DUMMY_USERS.find(u => u.id === userId.toString());\n    return (userData === null || userData === void 0 ? void 0 : userData.name) || `User ${userId}`;\n  };\n\n  // Fetch task logs from API\n  const fetchTimeLogs = async (employeeId, startDate, endDate) => {\n    if (!useRealData) return; // Skip if using dummy data\n\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await timesheetService.getTaskLogsByEmployee(employeeId, startDate, endDate);\n      // Convert TaskLogResponse to TimeLog format for compatibility\n      const convertedLogs = response.data.taskLogs.map(taskLog => ({\n        id: taskLog.id,\n        employeeId: taskLog.userId.id,\n        projectId: '',\n        // Not directly available in task log format\n        taskId: '',\n        date: taskLog.date,\n        startTime: '09:00',\n        // Default values\n        endTime: '17:00',\n        duration: taskLog.totalHours * 60,\n        // Convert hours to minutes\n        description: taskLog.tasks.map(t => t.description).join(', '),\n        createdAt: taskLog.createdAt,\n        updatedAt: taskLog.updatedAt\n      }));\n      setTimeLogs(convertedLogs);\n      setApiAvailable(true);\n    } catch (err) {\n      console.error('Failed to fetch task logs:', err);\n      const errorMessage = err instanceof Error ? err.message : 'Failed to fetch task logs';\n\n      // Check if it's a 404 error (API endpoint not found)\n      if (errorMessage.includes('not found') || errorMessage.includes('404')) {\n        setError('API endpoint not available. Using demo data instead.');\n        setApiAvailable(false);\n        // Automatically switch to demo data\n        setUseRealData(false);\n      } else {\n        setError(errorMessage);\n        setApiAvailable(false);\n      }\n      setTimeLogs([]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Set default to first user on component mount (only if no pre-selected user)\n  React.useEffect(() => {\n    if (allUserIds.length > 0 && selectedUserId === 0 && !preSelectedUserId) {\n      setSelectedUserId(allUserIds[0]);\n    }\n  }, [allUserIds, selectedUserId, preSelectedUserId]);\n\n  // Debounced fetch to prevent excessive API calls\n  useEffect(() => {\n    if (!selectedUserId || !useRealData) return;\n    const timeoutId = setTimeout(() => {\n      fetchTimeLogs(selectedUserId.toString(), dateRange.startDate, dateRange.endDate);\n    }, 300); // 300ms debounce\n\n    return () => clearTimeout(timeoutId);\n  }, [selectedUserId, dateRange, useRealData]);\n\n  // Handle employee change with proper state management\n  const handleEmployeeChange = newEmployeeId => {\n    console.log('Switching to employee ID:', newEmployeeId);\n    setSelectedUserId(newEmployeeId);\n    setError(null); // Clear any previous errors\n\n    // If using real data, the useEffect above will trigger the fetch\n    // If using dummy data, the component will re-render with filtered data\n  };\n\n  // Validate date range\n  const isValidDateRange = () => {\n    if (!dateRange.startDate || !dateRange.endDate) return true; // Allow empty dates\n    return new Date(dateRange.startDate) <= new Date(dateRange.endDate);\n  };\n\n  // Filter dummy data by date range when not using real API\n  const getFilteredDummyData = () => {\n    if (useRealData) return filteredLogData;\n    return filteredLogData.filter(log => {\n      const logDate = new Date(log.date);\n      const startDate = dateRange.startDate ? new Date(dateRange.startDate) : null;\n      const endDate = dateRange.endDate ? new Date(dateRange.endDate) : null;\n      if (startDate && logDate < startDate) return false;\n      if (endDate && logDate > endDate) return false;\n      return true;\n    });\n  };\n\n  // Debug logging for pre-selected user\n  React.useEffect(() => {\n    if (preSelectedUserId) {\n      console.log('Pre-selected user ID:', preSelectedUserId);\n      console.log('Pre-selected user name:', preSelectedUserName);\n      console.log('Available user IDs in sample data:', allUserIds);\n      console.log('Selected user ID:', selectedUserId);\n    }\n  }, [preSelectedUserId, preSelectedUserName, allUserIds, selectedUserId]);\n\n  // Debug when selectedUserId changes\n  React.useEffect(() => {\n    console.log('selectedUserId changed to:', selectedUserId);\n  }, [selectedUserId]);\n\n  // Process real API task logs into display format\n  const processApiTaskLogs = async (employeeId, startDate, endDate) => {\n    try {\n      const response = await timesheetService.getTaskLogsByEmployee(employeeId, startDate, endDate);\n      return response.data.taskLogs.map(taskLog => {\n        const projectHours = {};\n        const descriptions = [];\n\n        // Initialize all projects with 0 hours\n        projectNames.forEach(projectName => {\n          projectHours[projectName] = 0;\n        });\n\n        // Process tasks from the task log\n        taskLog.tasks.forEach(task => {\n          if (!projectHours[task.project_name]) {\n            projectHours[task.project_name] = 0;\n          }\n          projectHours[task.project_name] += task.hours;\n          if (task.description) {\n            descriptions.push(task.description);\n          }\n        });\n        const sumOfProjectHours = Object.values(projectHours).reduce((sum, hours) => sum + hours, 0);\n        const hasValidationError = Math.abs(taskLog.totalHours - sumOfProjectHours) > 0.01;\n        return {\n          id: taskLog.id,\n          date: taskLog.date,\n          totalHours: taskLog.totalHours,\n          projectHours,\n          descriptions,\n          hasValidationError,\n          originalLogs: [] // We don't need to convert to TimeLog format for display\n        };\n      }).sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n    } catch (error) {\n      console.error('Failed to process task logs:', error);\n      return [];\n    }\n  };\n\n  // Filter data by selected user ID only\n  const filteredLogData = selectedUserId ? SAMPLE_LOG_DATA.filter(log => log.userId === selectedUserId) : SAMPLE_LOG_DATA;\n\n  // Debug logging\n  console.log('Selected User ID:', selectedUserId);\n  console.log('All User IDs:', allUserIds);\n  console.log('Filtered Data Count:', filteredLogData.length);\n  console.log('Sample Data Count:', SAMPLE_LOG_DATA.length);\n\n  // Get all unique project names from both DUMMY_PROJECTS and SAMPLE_LOG_DATA\n  const dummyProjectNames = DUMMY_PROJECTS.map(project => project.name);\n  const sampleProjectNames = Array.from(new Set(SAMPLE_LOG_DATA.flatMap(log => log.tasks.map(task => task.projectName))));\n  const projectNames = Array.from(new Set([...dummyProjectNames, ...sampleProjectNames]));\n\n  // Process log data to aggregate by project\n  const processedLogs = useRealData ? processApiTimeLogs(timeLogs) : getFilteredDummyData().map(log => {\n    const projectHours = {};\n    const descriptions = [];\n\n    // Initialize all projects with 0 hours\n    projectNames.forEach(projectName => {\n      projectHours[projectName] = 0;\n    });\n\n    // Aggregate hours by project and collect descriptions\n    log.tasks.forEach(task => {\n      if (projectHours.hasOwnProperty(task.projectName)) {\n        projectHours[task.projectName] += task.hours;\n      }\n      descriptions.push(task.description);\n    });\n\n    // Calculate sum of all project hours\n    const sumOfProjectHours = Object.values(projectHours).reduce((sum, hours) => sum + hours, 0);\n\n    // Check if total hours doesn't match sum of project hours\n    const hasValidationError = Math.abs(log.totalHours - sumOfProjectHours) > 0.01;\n    return {\n      id: log.id,\n      date: log.date,\n      totalHours: log.totalHours,\n      projectHours,\n      descriptions,\n      hasValidationError,\n      originalLogs: [] // No original logs for dummy data\n    };\n  });\n  console.log('Processed logs for user', selectedUserId, ':', processedLogs);\n\n  // Generate column headers (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z)\n  const columnHeaders = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n  const totalColumns = 3 + projectNames.length; // Date, Total Hours, What Accomplished + Projects\n  const usedColumns = columnHeaders.slice(0, totalColumns);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col h-full\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white border border-excel-border rounded-t-excel p-excel-md\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center justify-between\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center space-x-excel-md\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"text-excel-lg font-semibold text-black\",\n            children: [\"Viewing logs for: \", preSelectedUserName || getUserNameById(selectedUserId)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setUseRealData(!useRealData),\n            className: cn(\"px-excel-sm py-excel-xs text-excel-xs rounded-excel border transition-colors\", useRealData ? \"bg-blue-50 text-blue-700 border-blue-200\" : \"bg-gray-50 text-gray-700 border-gray-200\"),\n            title: useRealData ? \"Switch to dummy data\" : \"Switch to real API data\",\n            children: useRealData ? \"API Data\" : \"Demo Data\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center space-x-excel-md\",\n          children: [isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center space-x-excel-xs text-excel-sm text-excel-text-muted\",\n            children: [/*#__PURE__*/_jsxDEV(Loader2, {\n              className: \"w-4 h-4 animate-spin\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 307,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Loading...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 308,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 15\n          }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center space-x-excel-xs text-excel-sm text-red-600\",\n            children: [/*#__PURE__*/_jsxDEV(AlertCircle, {\n              className: \"w-4 h-4\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 313,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Error loading data\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 314,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-excel-sm text-excel-text-muted\",\n            children: [useRealData ? timeLogs.length : getFilteredDummyData().length, \" entries\", !isValidDateRange() && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-red-600 ml-excel-xs\",\n              children: \"(Invalid date range)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 320,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center space-x-excel-sm\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"date\",\n              value: dateRange.startDate,\n              onChange: e => {\n                const newStartDate = e.target.value;\n                setDateRange(prev => ({\n                  ...prev,\n                  startDate: newStartDate\n                }));\n                setError(null); // Clear errors when changing filters\n              },\n              className: \"px-excel-sm py-excel-xs text-excel-xs border border-excel-border rounded-excel bg-white\",\n              disabled: isLoading\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 324,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-excel-xs text-excel-text-muted\",\n              children: \"to\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 335,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"date\",\n              value: dateRange.endDate,\n              onChange: e => {\n                const newEndDate = e.target.value;\n                setDateRange(prev => ({\n                  ...prev,\n                  endDate: newEndDate\n                }));\n                setError(null); // Clear errors when changing filters\n              },\n              className: \"px-excel-sm py-excel-xs text-excel-xs border border-excel-border rounded-excel bg-white\",\n              disabled: isLoading\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 336,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => {\n                setDateRange(getCurrentMonthRange());\n                setError(null); // Clear errors when resetting\n              },\n              className: \"px-excel-sm py-excel-xs text-excel-xs bg-white border border-excel-border rounded-excel hover:bg-excel-hover transition-colors disabled:opacity-50 disabled:cursor-not-allowed\",\n              title: \"Current Month\",\n              disabled: isLoading,\n              children: \"\\uD83D\\uDCC5\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 347,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 323,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-1 overflow-auto\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white border-l border-r border-b border-excel-border rounded-b-excel overflow-hidden\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"overflow-x-auto\",\n          children: /*#__PURE__*/_jsxDEV(\"table\", {\n            className: \"w-full border-collapse\",\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n                className: \"bg-excel-gray-100 border-b border-excel-border\",\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  className: \"w-12 h-6 border-r border-excel-border bg-excel-gray-200 text-excel-xs font-medium text-excel-text-muted\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 373,\n                  columnNumber: 15\n                }, this), usedColumns.map((col, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n                  className: cn('h-6 border-r border-excel-border bg-excel-gray-200 text-excel-xs font-medium text-excel-text-muted text-center', index === 0 && 'w-32',\n                  // Date column\n                  index === 1 && 'w-24',\n                  // Total Hours column\n                  index === 2 && 'w-80',\n                  // What Accomplished column\n                  index > 2 && 'w-32' // Project columns\n                  ),\n                  children: col\n                }, col, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 375,\n                  columnNumber: 17\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 372,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                className: \"bg-excel-header border-b border-excel-border\",\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  className: \"w-12 h-8 border-r border-excel-border bg-excel-gray-200 text-excel-xs font-medium text-excel-text-muted\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 391,\n                  columnNumber: 15\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  className: \"h-8 px-excel-md border-r border-excel-border bg-excel-header text-excel-sm font-medium text-white text-left\",\n                  children: \"Date\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 392,\n                  columnNumber: 15\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  className: \"h-8 px-excel-md border-r border-excel-border bg-excel-header text-excel-sm font-medium text-white text-center\",\n                  children: \"Total Hours\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 395,\n                  columnNumber: 15\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  className: \"h-8 px-excel-md border-r border-excel-border bg-excel-header text-excel-sm font-medium text-white text-left\",\n                  children: \"What Accomplished\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 398,\n                  columnNumber: 15\n                }, this), projectNames.map((projectName, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n                  className: \"h-8 px-excel-md border-r border-excel-border bg-excel-header text-excel-sm font-medium text-white text-center\",\n                  children: projectName\n                }, projectName, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 402,\n                  columnNumber: 17\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 390,\n                columnNumber: 13\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 370,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: isLoading ? /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: /*#__PURE__*/_jsxDEV(\"td\", {\n                  colSpan: totalColumns + 1,\n                  className: \"h-16 px-excel-md py-excel-sm text-center text-excel-sm text-excel-text-muted bg-excel-gray-50\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"flex items-center justify-center space-x-excel-md\",\n                    children: [/*#__PURE__*/_jsxDEV(Loader2, {\n                      className: \"w-4 h-4 animate-spin\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 421,\n                      columnNumber: 21\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: \"Loading time logs...\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 422,\n                      columnNumber: 21\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 420,\n                    columnNumber: 19\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 416,\n                  columnNumber: 17\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 415,\n                columnNumber: 15\n              }, this) : error ? /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: /*#__PURE__*/_jsxDEV(\"td\", {\n                  colSpan: totalColumns + 1,\n                  className: \"h-16 px-excel-md py-excel-sm text-center text-excel-sm text-red-600 bg-red-50\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"flex items-center justify-center space-x-excel-md\",\n                    children: [/*#__PURE__*/_jsxDEV(AlertCircle, {\n                      className: \"w-4 h-4\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 433,\n                      columnNumber: 21\n                    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                      children: error\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 434,\n                      columnNumber: 21\n                    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                      onClick: () => fetchTimeLogs(selectedUserId.toString(), dateRange.startDate, dateRange.endDate),\n                      className: \"text-blue-600 hover:text-blue-700 underline\",\n                      children: \"Retry\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 435,\n                      columnNumber: 21\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 432,\n                    columnNumber: 19\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 428,\n                  columnNumber: 17\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 427,\n                columnNumber: 15\n              }, this) : processedLogs.length === 0 ? /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: /*#__PURE__*/_jsxDEV(\"td\", {\n                  colSpan: totalColumns + 1,\n                  className: \"h-16 px-excel-md py-excel-sm text-center text-excel-sm text-excel-text-muted bg-excel-gray-50\",\n                  children: selectedUserId && useRealData ? `No logs available for ${getUserNameById(selectedUserId)}. This user may not have logged any tasks yet.` : selectedUserId && !allUserIds.includes(selectedUserId) ? `No logs available for ${getUserNameById(selectedUserId)}. This user may not have logged any tasks yet.` : 'No logs found for the selected criteria.'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 446,\n                  columnNumber: 17\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 445,\n                columnNumber: 15\n              }, this) : processedLogs.map((log, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                className: cn(\"border-b border-excel-border\", log.hasValidationError ? \"bg-red-50 hover:bg-red-100\" : \"hover:bg-excel-hover\"),\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  className: cn(\"w-4 h-4 border-r border-excel-border text-excel-xs font-medium text-center\", log.hasValidationError ? \"bg-red-100 text-red-600\" : \"bg-excel-gray-200 text-excel-text-muted\"),\n                  children: rowIndex + 1\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 470,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: cn(\"h-8 px-excel-md py-excel-sm border-r border-excel-border text-excel-sm\", log.hasValidationError ? \"bg-red-50 text-red-800\" : \"bg-white text-excel-text-primary\"),\n                  children: new Date(log.date).toLocaleDateString('en-US', {\n                    month: 'short',\n                    day: 'numeric',\n                    year: 'numeric'\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 480,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: cn(\"h-8 px-excel-md py-excel-sm border-r border-excel-border text-excel-sm text-center font-medium\", log.hasValidationError ? \"bg-red-50 text-red-800\" : \"bg-white text-excel-text-primary\"),\n                  children: log.totalHours\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 494,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: cn(\"h-auto px-excel-md py-excel-sm border-r border-excel-border text-excel-sm max-w-80\", log.hasValidationError ? \"bg-red-50 text-red-800\" : \"bg-white text-excel-text-primary\"),\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"break-words whitespace-normal\",\n                    children: log.descriptions.join(', ')\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 510,\n                    columnNumber: 19\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 504,\n                  columnNumber: 17\n                }, this), projectNames.map((projectName, projectIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: cn(\"h-8 px-excel-md py-excel-sm border-r border-excel-border text-excel-sm text-center\", log.hasValidationError ? \"bg-red-50 text-red-800\" : \"bg-white text-excel-text-primary\"),\n                  children: log.projectHours[projectName] > 0 ? `${log.projectHours[projectName]} hrs` : '-'\n                }, projectName, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 517,\n                  columnNumber: 19\n                }, this))]\n              }, log.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 460,\n                columnNumber: 15\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 413,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 368,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 7\n        }, this), processedLogs.some(log => log.hasValidationError) && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-red-50 border-t border-red-200 p-excel-md\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center space-x-excel-md text-excel-sm text-red-700\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"font-medium\",\n              children: \"\\u26A0\\uFE0F Validation Alert:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 540,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [processedLogs.filter(log => log.hasValidationError).length, \" row(s) have total hours that don't match the sum of project hours\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 541,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 539,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 538,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-excel-gray-100 border-t border-excel-border\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex overflow-x-auto\",\n        children: allUserIdsFromDummy.map(userId => {\n          const hasLogs = allUserIds.includes(userId);\n          return /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleEmployeeChange(userId),\n            className: cn('px-excel-lg py-excel-sm text-excel-sm font-medium border-r border-excel-border whitespace-nowrap transition-colors duration-150', selectedUserId === userId ? 'bg-white text-excel-blue-600 border-b-2 border-excel-blue-500' : 'bg-excel-gray-100 text-excel-text-primary hover:bg-excel-gray-200', !hasLogs && 'opacity-60'),\n            title: !hasLogs ? 'No logs available for this user' : '',\n            children: [getUserNameById(userId), !hasLogs && ' (No logs)']\n          }, userId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 556,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 552,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 551,\n      columnNumber: 7\n    }, this)]\n  }, selectedUserId, true, {\n    fileName: _jsxFileName,\n    lineNumber: 282,\n    columnNumber: 5\n  }, this);\n};\n_s(ViewLogs, \"MPAa+0xeFFp2IiUr2+UHGgctGAs=\", false, function () {\n  return [useSearchParams];\n});\n_c = ViewLogs;\nexport default ViewLogs;\nvar _c;\n$RefreshReg$(_c, \"ViewLogs\");","map":{"version":3,"names":["React","useState","useEffect","useSearchParams","cn","DUMMY_PROJECTS","DUMMY_USERS","SAMPLE_LOG_DATA","timesheetService","Loader2","AlertCircle","jsxDEV","_jsxDEV","ViewLogs","_s","searchParams","preSelectedUserId","get","preSelectedUserName","selectedUserId","setSelectedUserId","parseInt","getCurrentMonthRange","now","Date","firstDay","getFullYear","getMonth","startDate","toISOString","split","endDate","dateRange","setDateRange","timeLogs","setTimeLogs","isLoading","setIsLoading","error","setError","useRealData","setUseRealData","apiAvailable","setApiAvailable","allUserIds","Array","from","Set","map","log","userId","allUserIdsFromDummy","user","id","getUserNameById","userData","find","u","toString","name","fetchTimeLogs","employeeId","response","getTaskLogsByEmployee","convertedLogs","data","taskLogs","taskLog","projectId","taskId","date","startTime","endTime","duration","totalHours","description","tasks","t","join","createdAt","updatedAt","err","console","errorMessage","Error","message","includes","length","timeoutId","setTimeout","clearTimeout","handleEmployeeChange","newEmployeeId","isValidDateRange","getFilteredDummyData","filteredLogData","filter","logDate","processApiTaskLogs","projectHours","descriptions","projectNames","forEach","projectName","task","project_name","hours","push","sumOfProjectHours","Object","values","reduce","sum","hasValidationError","Math","abs","originalLogs","sort","a","b","getTime","dummyProjectNames","project","sampleProjectNames","flatMap","processedLogs","processApiTimeLogs","hasOwnProperty","columnHeaders","totalColumns","usedColumns","slice","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","title","type","value","onChange","e","newStartDate","target","prev","disabled","newEndDate","col","index","colSpan","rowIndex","toLocaleDateString","month","day","year","projectIndex","some","hasLogs","_c","$RefreshReg$"],"sources":["/Users/obs-fa/Downloads/Front End/src/components/ViewLogs.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { cn } from '../utils/helpers';\nimport { DUMMY_PROJECTS, DUMMY_USERS } from '../constants/dummyData';\nimport { SAMPLE_LOG_DATA, LogEntry } from '../constants/sampleLogData';\nimport { timesheetService } from '../services';\nimport { TimeLog } from '../types/timesheet.types';\nimport { Loader2, AlertCircle } from 'lucide-react';\n\ninterface ProcessedTimeLog {\n  id?: string;\n  date: string;\n  totalHours: number;\n  projectHours: Record<string, number>;\n  descriptions: string[];\n  hasValidationError: boolean;\n  originalLogs: TimeLog[];\n}\n\nconst ViewLogs: React.FC = () => {\n  const [searchParams] = useSearchParams();\n  const preSelectedUserId = searchParams.get('user');\n  const preSelectedUserName = searchParams.get('name');\n  \n  const [selectedUserId, setSelectedUserId] = useState<number>(\n    preSelectedUserId ? parseInt(preSelectedUserId) : 0\n  );\n  \n  // Date range state - default to current month\n  const getCurrentMonthRange = () => {\n    const now = new Date();\n    const firstDay = new Date(now.getFullYear(), now.getMonth(), 1);\n    return {\n      startDate: firstDay.toISOString().split('T')[0],\n      endDate: now.toISOString().split('T')[0]\n    };\n  };\n  \n  const [dateRange, setDateRange] = useState(getCurrentMonthRange());\n  \n  // API state management\n  const [timeLogs, setTimeLogs] = useState<TimeLog[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [useRealData, setUseRealData] = useState(false); // Default to demo data since API endpoints may not exist\n  const [apiAvailable, setApiAvailable] = useState<boolean | null>(null); // Track if API is available\n  \n  // Get all unique user IDs from sample data\n  const allUserIds = Array.from(new Set(SAMPLE_LOG_DATA.map(log => log.userId)));\n  \n  // Get all user IDs from DUMMY_USERS (including those without logs)\n  const allUserIdsFromDummy = DUMMY_USERS.map(user => parseInt(user.id));\n  \n  // Helper function to get user name from ID\n  const getUserNameById = (userId: number) => {\n    const userData = DUMMY_USERS.find(u => u.id === userId.toString());\n    return userData?.name || `User ${userId}`;\n  };\n  \n  // Fetch task logs from API\n  const fetchTimeLogs = async (employeeId: string, startDate?: string, endDate?: string) => {\n    if (!useRealData) return; // Skip if using dummy data\n    \n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      const response = await timesheetService.getTaskLogsByEmployee(\n        employeeId, \n        startDate, \n        endDate\n      );\n      // Convert TaskLogResponse to TimeLog format for compatibility\n      const convertedLogs: TimeLog[] = response.data.taskLogs.map(taskLog => ({\n        id: taskLog.id,\n        employeeId: taskLog.userId.id,\n        projectId: '', // Not directly available in task log format\n        taskId: '',\n        date: taskLog.date,\n        startTime: '09:00', // Default values\n        endTime: '17:00',\n        duration: taskLog.totalHours * 60, // Convert hours to minutes\n        description: taskLog.tasks.map(t => t.description).join(', '),\n        createdAt: taskLog.createdAt,\n        updatedAt: taskLog.updatedAt\n      }));\n      \n      setTimeLogs(convertedLogs);\n      setApiAvailable(true);\n    } catch (err) {\n      console.error('Failed to fetch task logs:', err);\n      const errorMessage = err instanceof Error ? err.message : 'Failed to fetch task logs';\n      \n      // Check if it's a 404 error (API endpoint not found)\n      if (errorMessage.includes('not found') || errorMessage.includes('404')) {\n        setError('API endpoint not available. Using demo data instead.');\n        setApiAvailable(false);\n        // Automatically switch to demo data\n        setUseRealData(false);\n      } else {\n        setError(errorMessage);\n        setApiAvailable(false);\n      }\n      setTimeLogs([]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Set default to first user on component mount (only if no pre-selected user)\n  React.useEffect(() => {\n    if (allUserIds.length > 0 && selectedUserId === 0 && !preSelectedUserId) {\n      setSelectedUserId(allUserIds[0]);\n    }\n  }, [allUserIds, selectedUserId, preSelectedUserId]);\n\n  // Debounced fetch to prevent excessive API calls\n  useEffect(() => {\n    if (!selectedUserId || !useRealData) return;\n    \n    const timeoutId = setTimeout(() => {\n      fetchTimeLogs(selectedUserId.toString(), dateRange.startDate, dateRange.endDate);\n    }, 300); // 300ms debounce\n    \n    return () => clearTimeout(timeoutId);\n  }, [selectedUserId, dateRange, useRealData]);\n\n  // Handle employee change with proper state management\n  const handleEmployeeChange = (newEmployeeId: number) => {\n    console.log('Switching to employee ID:', newEmployeeId);\n    setSelectedUserId(newEmployeeId);\n    setError(null); // Clear any previous errors\n    \n    // If using real data, the useEffect above will trigger the fetch\n    // If using dummy data, the component will re-render with filtered data\n  };\n\n  // Validate date range\n  const isValidDateRange = () => {\n    if (!dateRange.startDate || !dateRange.endDate) return true; // Allow empty dates\n    return new Date(dateRange.startDate) <= new Date(dateRange.endDate);\n  };\n\n  // Filter dummy data by date range when not using real API\n  const getFilteredDummyData = () => {\n    if (useRealData) return filteredLogData;\n    \n    return filteredLogData.filter(log => {\n      const logDate = new Date(log.date);\n      const startDate = dateRange.startDate ? new Date(dateRange.startDate) : null;\n      const endDate = dateRange.endDate ? new Date(dateRange.endDate) : null;\n      \n      if (startDate && logDate < startDate) return false;\n      if (endDate && logDate > endDate) return false;\n      \n      return true;\n    });\n  };\n  \n  // Debug logging for pre-selected user\n  React.useEffect(() => {\n    if (preSelectedUserId) {\n      console.log('Pre-selected user ID:', preSelectedUserId);\n      console.log('Pre-selected user name:', preSelectedUserName);\n      console.log('Available user IDs in sample data:', allUserIds);\n      console.log('Selected user ID:', selectedUserId);\n    }\n  }, [preSelectedUserId, preSelectedUserName, allUserIds, selectedUserId]);\n  \n  // Debug when selectedUserId changes\n  React.useEffect(() => {\n    console.log('selectedUserId changed to:', selectedUserId);\n  }, [selectedUserId]);\n  \n  // Process real API task logs into display format\n  const processApiTaskLogs = async (employeeId: string, startDate?: string, endDate?: string): Promise<ProcessedTimeLog[]> => {\n    try {\n      const response = await timesheetService.getTaskLogsByEmployee(employeeId, startDate, endDate);\n      \n      return response.data.taskLogs.map(taskLog => {\n        const projectHours: Record<string, number> = {};\n        const descriptions: string[] = [];\n        \n        // Initialize all projects with 0 hours\n        projectNames.forEach(projectName => {\n          projectHours[projectName] = 0;\n        });\n\n        // Process tasks from the task log\n        taskLog.tasks.forEach(task => {\n          if (!projectHours[task.project_name]) {\n            projectHours[task.project_name] = 0;\n          }\n          projectHours[task.project_name] += task.hours;\n          if (task.description) {\n            descriptions.push(task.description);\n          }\n        });\n\n        const sumOfProjectHours = Object.values(projectHours).reduce((sum, hours) => sum + hours, 0);\n        const hasValidationError = Math.abs(taskLog.totalHours - sumOfProjectHours) > 0.01;\n\n        return {\n          id: taskLog.id,\n          date: taskLog.date,\n          totalHours: taskLog.totalHours,\n          projectHours,\n          descriptions,\n          hasValidationError,\n          originalLogs: [] // We don't need to convert to TimeLog format for display\n        };\n      }).sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n    } catch (error) {\n      console.error('Failed to process task logs:', error);\n      return [];\n    }\n  };\n\n  // Filter data by selected user ID only\n  const filteredLogData = selectedUserId \n    ? SAMPLE_LOG_DATA.filter(log => log.userId === selectedUserId)\n    : SAMPLE_LOG_DATA;\n  \n  // Debug logging\n  console.log('Selected User ID:', selectedUserId);\n  console.log('All User IDs:', allUserIds);\n  console.log('Filtered Data Count:', filteredLogData.length);\n  console.log('Sample Data Count:', SAMPLE_LOG_DATA.length);\n  \n  // Get all unique project names from both DUMMY_PROJECTS and SAMPLE_LOG_DATA\n  const dummyProjectNames = DUMMY_PROJECTS.map(project => project.name);\n  const sampleProjectNames = Array.from(new Set(\n    SAMPLE_LOG_DATA.flatMap(log => log.tasks.map(task => task.projectName))\n  ));\n  const projectNames = Array.from(new Set([...dummyProjectNames, ...sampleProjectNames]));\n  \n  // Process log data to aggregate by project\n  const processedLogs = useRealData \n    ? processApiTimeLogs(timeLogs)\n    : getFilteredDummyData().map(log => {\n        const projectHours: { [key: string]: number } = {};\n        const descriptions: string[] = [];\n        \n        // Initialize all projects with 0 hours\n        projectNames.forEach(projectName => {\n          projectHours[projectName] = 0;\n        });\n        \n        // Aggregate hours by project and collect descriptions\n        log.tasks.forEach(task => {\n          if (projectHours.hasOwnProperty(task.projectName)) {\n            projectHours[task.projectName] += task.hours;\n          }\n          descriptions.push(task.description);\n        });\n        \n        // Calculate sum of all project hours\n        const sumOfProjectHours = Object.values(projectHours).reduce((sum, hours) => sum + hours, 0);\n        \n        // Check if total hours doesn't match sum of project hours\n        const hasValidationError = Math.abs(log.totalHours - sumOfProjectHours) > 0.01;\n        \n        return {\n          id: log.id,\n          date: log.date,\n          totalHours: log.totalHours,\n          projectHours,\n          descriptions,\n          hasValidationError,\n          originalLogs: [] // No original logs for dummy data\n        };\n      });\n  \n  console.log('Processed logs for user', selectedUserId, ':', processedLogs);\n\n  // Generate column headers (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z)\n  const columnHeaders = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n  const totalColumns = 3 + projectNames.length; // Date, Total Hours, What Accomplished + Projects\n  const usedColumns = columnHeaders.slice(0, totalColumns);\n\n  return (\n    <div className=\"flex flex-col h-full\" key={selectedUserId}>\n      {/* User Info Header with Date Filter */}\n      <div className=\"bg-white border border-excel-border rounded-t-excel p-excel-md\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-excel-md\">\n            <h3 className=\"text-excel-lg font-semibold text-black\">\n              Viewing logs for: {preSelectedUserName || getUserNameById(selectedUserId)}\n            </h3>\n            {/* Data source toggle */}\n            <button\n              onClick={() => setUseRealData(!useRealData)}\n              className={cn(\n                \"px-excel-sm py-excel-xs text-excel-xs rounded-excel border transition-colors\",\n                useRealData \n                  ? \"bg-blue-50 text-blue-700 border-blue-200\" \n                  : \"bg-gray-50 text-gray-700 border-gray-200\"\n              )}\n              title={useRealData ? \"Switch to dummy data\" : \"Switch to real API data\"}\n            >\n              {useRealData ? \"API Data\" : \"Demo Data\"}\n            </button>\n          </div>\n          <div className=\"flex items-center space-x-excel-md\">\n            {isLoading && (\n              <div className=\"flex items-center space-x-excel-xs text-excel-sm text-excel-text-muted\">\n                <Loader2 className=\"w-4 h-4 animate-spin\" />\n                <span>Loading...</span>\n              </div>\n            )}\n            {error && (\n              <div className=\"flex items-center space-x-excel-xs text-excel-sm text-red-600\">\n                <AlertCircle className=\"w-4 h-4\" />\n                <span>Error loading data</span>\n              </div>\n            )}\n            <span className=\"text-excel-sm text-excel-text-muted\">\n              {useRealData ? timeLogs.length : getFilteredDummyData().length} entries\n              {!isValidDateRange() && (\n                <span className=\"text-red-600 ml-excel-xs\">(Invalid date range)</span>\n              )}\n            </span>\n            <div className=\"flex items-center space-x-excel-sm\">\n              <input\n                type=\"date\"\n                value={dateRange.startDate}\n                onChange={(e) => {\n                  const newStartDate = e.target.value;\n                  setDateRange(prev => ({ ...prev, startDate: newStartDate }));\n                  setError(null); // Clear errors when changing filters\n                }}\n                className=\"px-excel-sm py-excel-xs text-excel-xs border border-excel-border rounded-excel bg-white\"\n                disabled={isLoading}\n              />\n              <span className=\"text-excel-xs text-excel-text-muted\">to</span>\n              <input\n                type=\"date\"\n                value={dateRange.endDate}\n                onChange={(e) => {\n                  const newEndDate = e.target.value;\n                  setDateRange(prev => ({ ...prev, endDate: newEndDate }));\n                  setError(null); // Clear errors when changing filters\n                }}\n                className=\"px-excel-sm py-excel-xs text-excel-xs border border-excel-border rounded-excel bg-white\"\n                disabled={isLoading}\n              />\n              <button\n                onClick={() => {\n                  setDateRange(getCurrentMonthRange());\n                  setError(null); // Clear errors when resetting\n                }}\n                className=\"px-excel-sm py-excel-xs text-excel-xs bg-white border border-excel-border rounded-excel hover:bg-excel-hover transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n                title=\"Current Month\"\n                disabled={isLoading}\n              >\n                📅\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      {/* Main Table Content */}\n      <div className=\"flex-1 overflow-auto\">\n        <div className=\"bg-white border-l border-r border-b border-excel-border rounded-b-excel overflow-hidden\">\n      {/* Excel-like Table */}\n      <div className=\"overflow-x-auto\">\n        <table className=\"w-full border-collapse\">\n          {/* Column Headers */}\n          <thead>\n            {/* Excel Column Letters Row */}\n            <tr className=\"bg-excel-gray-100 border-b border-excel-border\">\n              <th className=\"w-12 h-6 border-r border-excel-border bg-excel-gray-200 text-excel-xs font-medium text-excel-text-muted\"></th>\n              {usedColumns.map((col, index) => (\n                <th\n                  key={col}\n                  className={cn(\n                    'h-6 border-r border-excel-border bg-excel-gray-200 text-excel-xs font-medium text-excel-text-muted text-center',\n                    index === 0 && 'w-32', // Date column\n                    index === 1 && 'w-24', // Total Hours column\n                    index === 2 && 'w-80', // What Accomplished column\n                    index > 2 && 'w-32' // Project columns\n                  )}\n                >\n                  {col}\n                </th>\n              ))}\n            </tr>\n            {/* Column Names Row */}\n            <tr className=\"bg-excel-header border-b border-excel-border\">\n              <th className=\"w-12 h-8 border-r border-excel-border bg-excel-gray-200 text-excel-xs font-medium text-excel-text-muted\"></th>\n              <th className=\"h-8 px-excel-md border-r border-excel-border bg-excel-header text-excel-sm font-medium text-white text-left\">\n                Date\n              </th>\n              <th className=\"h-8 px-excel-md border-r border-excel-border bg-excel-header text-excel-sm font-medium text-white text-center\">\n                Total Hours\n              </th>\n              <th className=\"h-8 px-excel-md border-r border-excel-border bg-excel-header text-excel-sm font-medium text-white text-left\">\n                What Accomplished\n              </th>\n              {projectNames.map((projectName, index) => (\n                <th\n                  key={projectName}\n                  className=\"h-8 px-excel-md border-r border-excel-border bg-excel-header text-excel-sm font-medium text-white text-center\"\n                >\n                  {projectName}\n                </th>\n              ))}\n            </tr>\n          </thead>\n\n          {/* Data Rows */}\n          <tbody>\n            {isLoading ? (\n              <tr>\n                <td \n                  colSpan={totalColumns + 1} \n                  className=\"h-16 px-excel-md py-excel-sm text-center text-excel-sm text-excel-text-muted bg-excel-gray-50\"\n                >\n                  <div className=\"flex items-center justify-center space-x-excel-md\">\n                    <Loader2 className=\"w-4 h-4 animate-spin\" />\n                    <span>Loading time logs...</span>\n                  </div>\n                </td>\n              </tr>\n            ) : error ? (\n              <tr>\n                <td \n                  colSpan={totalColumns + 1} \n                  className=\"h-16 px-excel-md py-excel-sm text-center text-excel-sm text-red-600 bg-red-50\"\n                >\n                  <div className=\"flex items-center justify-center space-x-excel-md\">\n                    <AlertCircle className=\"w-4 h-4\" />\n                    <span>{error}</span>\n                    <button\n                      onClick={() => fetchTimeLogs(selectedUserId.toString(), dateRange.startDate, dateRange.endDate)}\n                      className=\"text-blue-600 hover:text-blue-700 underline\"\n                    >\n                      Retry\n                    </button>\n                  </div>\n                </td>\n              </tr>\n            ) : processedLogs.length === 0 ? (\n              <tr>\n                <td \n                  colSpan={totalColumns + 1} \n                  className=\"h-16 px-excel-md py-excel-sm text-center text-excel-sm text-excel-text-muted bg-excel-gray-50\"\n                >\n                  {selectedUserId && useRealData\n                    ? `No logs available for ${getUserNameById(selectedUserId)}. This user may not have logged any tasks yet.`\n                    : selectedUserId && !allUserIds.includes(selectedUserId) \n                    ? `No logs available for ${getUserNameById(selectedUserId)}. This user may not have logged any tasks yet.`\n                    : 'No logs found for the selected criteria.'\n                  }\n                </td>\n              </tr>\n            ) : (\n              processedLogs.map((log, rowIndex) => (\n              <tr \n                key={log.id} \n                className={cn(\n                  \"border-b border-excel-border\",\n                  log.hasValidationError \n                    ? \"bg-red-50 hover:bg-red-100\" \n                    : \"hover:bg-excel-hover\"\n                )}\n              >\n                {/* Row Number */}\n                <td className={cn(\n                  \"w-4 h-4 border-r border-excel-border text-excel-xs font-medium text-center\",\n                  log.hasValidationError \n                    ? \"bg-red-100 text-red-600\" \n                    : \"bg-excel-gray-200 text-excel-text-muted\"\n                )}>\n                  {rowIndex + 1}\n                </td>\n                \n                {/* Date */}\n                <td className={cn(\n                  \"h-8 px-excel-md py-excel-sm border-r border-excel-border text-excel-sm\",\n                  log.hasValidationError \n                    ? \"bg-red-50 text-red-800\" \n                    : \"bg-white text-excel-text-primary\"\n                )}>\n                  {new Date(log.date).toLocaleDateString('en-US', { \n                    month: 'short', \n                    day: 'numeric',\n                    year: 'numeric' \n                  })}\n                </td>\n                \n                {/* Total Hours */}\n                <td className={cn(\n                  \"h-8 px-excel-md py-excel-sm border-r border-excel-border text-excel-sm text-center font-medium\",\n                  log.hasValidationError \n                    ? \"bg-red-50 text-red-800\" \n                    : \"bg-white text-excel-text-primary\"\n                )}>\n                  {log.totalHours}\n                </td>\n                \n                {/* What Accomplished */}\n                <td className={cn(\n                  \"h-auto px-excel-md py-excel-sm border-r border-excel-border text-excel-sm max-w-80\",\n                  log.hasValidationError \n                    ? \"bg-red-50 text-red-800\" \n                    : \"bg-white text-excel-text-primary\"\n                )}>\n                  <div className=\"break-words whitespace-normal\">\n                    {log.descriptions.join(', ')}\n                  </div>\n                </td>\n                \n                {/* Project Columns */}\n                {projectNames.map((projectName, projectIndex) => (\n                  <td\n                    key={projectName}\n                    className={cn(\n                      \"h-8 px-excel-md py-excel-sm border-r border-excel-border text-excel-sm text-center\",\n                      log.hasValidationError \n                        ? \"bg-red-50 text-red-800\" \n                        : \"bg-white text-excel-text-primary\"\n                    )}\n                  >\n                    {log.projectHours[projectName] > 0 ? `${log.projectHours[projectName]} hrs` : '-'}\n                  </td>\n                ))}\n              </tr>\n            ))\n            )}\n          </tbody>\n        </table>\n      </div>\n\n      {/* Validation Summary */}\n      {processedLogs.some(log => log.hasValidationError) && (\n        <div className=\"bg-red-50 border-t border-red-200 p-excel-md\">\n          <div className=\"flex items-center space-x-excel-md text-excel-sm text-red-700\">\n            <span className=\"font-medium\">⚠️ Validation Alert:</span>\n            <span>\n              {processedLogs.filter(log => log.hasValidationError).length} row(s) have total hours that don't match the sum of project hours\n            </span>\n          </div>\n        </div>\n      )}\n        </div>\n      </div>\n\n      {/* Bottom User Tabs Navigation (Excel-like) */}\n      <div className=\"bg-excel-gray-100 border-t border-excel-border\">\n        <div className=\"flex overflow-x-auto\">\n          {allUserIdsFromDummy.map((userId) => {\n            const hasLogs = allUserIds.includes(userId);\n            return (\n              <button\n                key={userId}\n                onClick={() => handleEmployeeChange(userId)}\n                className={cn(\n                  'px-excel-lg py-excel-sm text-excel-sm font-medium border-r border-excel-border whitespace-nowrap transition-colors duration-150',\n                  selectedUserId === userId\n                    ? 'bg-white text-excel-blue-600 border-b-2 border-excel-blue-500'\n                    : 'bg-excel-gray-100 text-excel-text-primary hover:bg-excel-gray-200',\n                  !hasLogs && 'opacity-60'\n                )}\n                title={!hasLogs ? 'No logs available for this user' : ''}\n              >\n                {getUserNameById(userId)}\n                {!hasLogs && ' (No logs)'}\n              </button>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ViewLogs;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}