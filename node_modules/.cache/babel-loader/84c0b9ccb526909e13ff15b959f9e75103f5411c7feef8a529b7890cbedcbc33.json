{"ast":null,"code":"import apiClient from '../../config/axios';\n\n// Backend API response format for task logs\n\nclass TimesheetService {\n  /**\n   * Get all time logs\n   */\n  async getTimeLogs(page = 1, limit = 10) {\n    try {\n      const response = await apiClient.get(`/timesheet?page=${page}&limit=${limit}`);\n      return response.data;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Failed to fetch time logs');\n    }\n  }\n\n  /**\n   * Get time log by ID\n   */\n  async getTimeLogById(id) {\n    try {\n      const response = await apiClient.get(`/timesheet/${id}`);\n      return response.data;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Failed to fetch time log');\n    }\n  }\n\n  /**\n   * Create new time log\n   */\n  async createTimeLog(timeLogData) {\n    try {\n      const response = await apiClient.post('/timesheet', timeLogData);\n      return response.data;\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Failed to create time log');\n    }\n  }\n\n  /**\n   * Update time log\n   */\n  async updateTimeLog(id, timeLogData) {\n    try {\n      const response = await apiClient.put(`/timesheet/${id}`, timeLogData);\n      return response.data;\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      throw new Error(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Failed to update time log');\n    }\n  }\n\n  /**\n   * Delete time log\n   */\n  async deleteTimeLog(id) {\n    try {\n      const response = await apiClient.delete(`/timesheet/${id}`);\n      return response.data;\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      throw new Error(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Failed to delete time log');\n    }\n  }\n\n  /**\n   * Get time logs by employee ID\n   */\n  async getTimeLogsByEmployee(employeeId, page = 1, limit = 10) {\n    try {\n      const response = await apiClient.get(`/timesheet/employee/${employeeId}?page=${page}&limit=${limit}`);\n      return response.data;\n    } catch (error) {\n      var _error$response6, _error$response6$data;\n      throw new Error(((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || 'Failed to fetch employee time logs');\n    }\n  }\n\n  /**\n   * Get time logs by project ID\n   */\n  async getTimeLogsByProject(projectId, page = 1, limit = 10) {\n    try {\n      const response = await apiClient.get(`/timesheet/project/${projectId}?page=${page}&limit=${limit}`);\n      return response.data;\n    } catch (error) {\n      var _error$response7, _error$response7$data;\n      throw new Error(((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.message) || 'Failed to fetch project time logs');\n    }\n  }\n\n  /**\n   * Create multiple time log entries in a batch operation\n   */\n  async createMultipleTimeLogs(timeLogEntries) {\n    try {\n      const response = await apiClient.post('/timesheet/batch', {\n        entries: timeLogEntries\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response8, _error$response8$data;\n      throw new Error(((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : (_error$response8$data = _error$response8.data) === null || _error$response8$data === void 0 ? void 0 : _error$response8$data.message) || 'Failed to create time log entries');\n    }\n  }\n\n  /**\n   * Get time logs by employee with date range filtering\n   */\n  async getTimeLogsByEmployeeAndDateRange(employeeId, startDate, endDate, page = 1, limit = 100) {\n    try {\n      const params = new URLSearchParams({\n        page: page.toString(),\n        limit: limit.toString()\n      });\n      if (startDate) params.append('startDate', startDate);\n      if (endDate) params.append('endDate', endDate);\n      const response = await apiClient.get(`/timesheet/employee/${employeeId}?${params.toString()}`);\n      return response.data;\n    } catch (error) {\n      var _error$response9, _error$response9$data;\n      throw new Error(((_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : (_error$response9$data = _error$response9.data) === null || _error$response9$data === void 0 ? void 0 : _error$response9$data.message) || 'Failed to fetch employee time logs');\n    }\n  }\n}\nexport const timesheetService = new TimesheetService();","map":{"version":3,"names":["apiClient","TimesheetService","getTimeLogs","page","limit","response","get","data","error","_error$response","_error$response$data","Error","message","getTimeLogById","id","_error$response2","_error$response2$data","createTimeLog","timeLogData","post","_error$response3","_error$response3$data","updateTimeLog","put","_error$response4","_error$response4$data","deleteTimeLog","delete","_error$response5","_error$response5$data","getTimeLogsByEmployee","employeeId","_error$response6","_error$response6$data","getTimeLogsByProject","projectId","_error$response7","_error$response7$data","createMultipleTimeLogs","timeLogEntries","entries","_error$response8","_error$response8$data","getTimeLogsByEmployeeAndDateRange","startDate","endDate","params","URLSearchParams","toString","append","_error$response9","_error$response9$data","timesheetService"],"sources":["/Users/obs-fa/Downloads/Front End/src/services/timesheet/timesheet.service.ts"],"sourcesContent":["import apiClient from '../../config/axios';\nimport { TimeLog, CreateTimeLogRequest, UpdateTimeLogRequest, ApiResponse, PaginatedResponse } from '../../types';\n\n// Backend API response format for task logs\ninterface TaskLogResponse {\n  id: string;\n  userId: {\n    id: string;\n    name: string;\n    email: string;\n    role: string;\n  };\n  date: string;\n  totalHours: number;\n  tasks: Array<{\n    project_name: string;\n    description: string;\n    hours: number;\n  }>;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface TaskLogCreateRequest {\n  userId: string;\n  date: string;\n  totalHours: number;\n  tasks: Array<{\n    project_name: string;\n    description: string;\n    hours: number;\n  }>;\n}\n\nclass TimesheetService {\n  /**\n   * Get all time logs\n   */\n  async getTimeLogs(page = 1, limit = 10): Promise<PaginatedResponse<TimeLog>> {\n    try {\n      const response = await apiClient.get<PaginatedResponse<TimeLog>>(`/timesheet?page=${page}&limit=${limit}`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.response?.data?.message || 'Failed to fetch time logs');\n    }\n  }\n\n  /**\n   * Get time log by ID\n   */\n  async getTimeLogById(id: string): Promise<ApiResponse<TimeLog>> {\n    try {\n      const response = await apiClient.get<ApiResponse<TimeLog>>(`/timesheet/${id}`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.response?.data?.message || 'Failed to fetch time log');\n    }\n  }\n\n  /**\n   * Create new time log\n   */\n  async createTimeLog(timeLogData: CreateTimeLogRequest): Promise<ApiResponse<TimeLog>> {\n    try {\n      const response = await apiClient.post<ApiResponse<TimeLog>>('/timesheet', timeLogData);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.response?.data?.message || 'Failed to create time log');\n    }\n  }\n\n  /**\n   * Update time log\n   */\n  async updateTimeLog(id: string, timeLogData: UpdateTimeLogRequest): Promise<ApiResponse<TimeLog>> {\n    try {\n      const response = await apiClient.put<ApiResponse<TimeLog>>(`/timesheet/${id}`, timeLogData);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.response?.data?.message || 'Failed to update time log');\n    }\n  }\n\n  /**\n   * Delete time log\n   */\n  async deleteTimeLog(id: string): Promise<ApiResponse<void>> {\n    try {\n      const response = await apiClient.delete<ApiResponse<void>>(`/timesheet/${id}`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.response?.data?.message || 'Failed to delete time log');\n    }\n  }\n\n  /**\n   * Get time logs by employee ID\n   */\n  async getTimeLogsByEmployee(employeeId: string, page = 1, limit = 10): Promise<PaginatedResponse<TimeLog>> {\n    try {\n      const response = await apiClient.get<PaginatedResponse<TimeLog>>(`/timesheet/employee/${employeeId}?page=${page}&limit=${limit}`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.response?.data?.message || 'Failed to fetch employee time logs');\n    }\n  }\n\n  /**\n   * Get time logs by project ID\n   */\n  async getTimeLogsByProject(projectId: string, page = 1, limit = 10): Promise<PaginatedResponse<TimeLog>> {\n    try {\n      const response = await apiClient.get<PaginatedResponse<TimeLog>>(`/timesheet/project/${projectId}?page=${page}&limit=${limit}`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.response?.data?.message || 'Failed to fetch project time logs');\n    }\n  }\n\n  /**\n   * Create multiple time log entries in a batch operation\n   */\n  async createMultipleTimeLogs(timeLogEntries: CreateTimeLogRequest[]): Promise<ApiResponse<TimeLog[]>> {\n    try {\n      const response = await apiClient.post<ApiResponse<TimeLog[]>>('/timesheet/batch', { entries: timeLogEntries });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.response?.data?.message || 'Failed to create time log entries');\n    }\n  }\n\n  /**\n   * Get time logs by employee with date range filtering\n   */\n  async getTimeLogsByEmployeeAndDateRange(\n    employeeId: string, \n    startDate?: string, \n    endDate?: string, \n    page = 1, \n    limit = 100\n  ): Promise<PaginatedResponse<TimeLog>> {\n    try {\n      const params = new URLSearchParams({\n        page: page.toString(),\n        limit: limit.toString()\n      });\n      \n      if (startDate) params.append('startDate', startDate);\n      if (endDate) params.append('endDate', endDate);\n      \n      const response = await apiClient.get<PaginatedResponse<TimeLog>>(\n        `/timesheet/employee/${employeeId}?${params.toString()}`\n      );\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.response?.data?.message || 'Failed to fetch employee time logs');\n    }\n  }\n}\n\nexport const timesheetService = new TimesheetService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}