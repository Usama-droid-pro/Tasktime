{"ast":null,"code":"import apiClient from '../../config/axios';\n\n// Backend API response format for task logs\n\nclass TimesheetService {\n  /**\n   * Get all task logs\n   */\n  async getTaskLogs(userId, startDate, endDate, projectName) {\n    try {\n      const params = new URLSearchParams();\n      if (userId) params.append('userId', userId);\n      if (startDate) params.append('startDate', startDate);\n      if (endDate) params.append('endDate', endDate);\n      if (projectName) params.append('project_name', projectName);\n      const response = await apiClient.get(`/tasklogs?${params.toString()}`);\n      return response.data;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Failed to fetch task logs');\n    }\n  }\n\n  /**\n   * Get single task log by user ID and date\n   */\n  async getTaskLogByUserAndDate(userId, date) {\n    try {\n      const params = new URLSearchParams({\n        userId,\n        date\n      });\n      const response = await apiClient.get(`/tasklogs/single?${params.toString()}`);\n      return response.data;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Failed to fetch task log');\n    }\n  }\n\n  /**\n   * Create or update task log\n   */\n  async createTaskLog(taskLogData) {\n    try {\n      const response = await apiClient.post('/tasklogs', taskLogData);\n      return response.data;\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Failed to create task log');\n    }\n  }\n\n  // Note: The backend API doesn't have separate update/delete endpoints\n  // Task logs are created or updated via the POST /tasklogs endpoint\n\n  /**\n   * Get task logs by employee with date range filtering\n   * This uses the main /tasklogs endpoint with userId filter\n   */\n  async getTaskLogsByEmployee(employeeId, startDate, endDate) {\n    try {\n      return await this.getTaskLogs(employeeId, startDate, endDate);\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      throw new Error(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Failed to fetch employee task logs');\n    }\n  }\n\n  /**\n   * Get task logs by project name\n   */\n  async getTaskLogsByProject(projectName, startDate, endDate) {\n    try {\n      return await this.getTaskLogs(undefined, startDate, endDate, projectName);\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      throw new Error(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Failed to fetch project task logs');\n    }\n  }\n}\nexport const timesheetService = new TimesheetService();","map":{"version":3,"names":["apiClient","TimesheetService","getTaskLogs","userId","startDate","endDate","projectName","params","URLSearchParams","append","response","get","toString","data","error","_error$response","_error$response$data","Error","message","getTaskLogByUserAndDate","date","_error$response2","_error$response2$data","createTaskLog","taskLogData","post","_error$response3","_error$response3$data","getTaskLogsByEmployee","employeeId","_error$response4","_error$response4$data","getTaskLogsByProject","undefined","_error$response5","_error$response5$data","timesheetService"],"sources":["/Users/obs-fa/Downloads/Front End/src/services/timesheet/timesheet.service.ts"],"sourcesContent":["import apiClient from '../../config/axios';\nimport { TimeLog, CreateTimeLogRequest, UpdateTimeLogRequest, ApiResponse, PaginatedResponse } from '../../types';\n\n// Backend API response format for task logs\ninterface TaskLogResponse {\n  id: string;\n  userId: {\n    id: string;\n    name: string;\n    email: string;\n    role: string;\n  };\n  date: string;\n  totalHours: number;\n  tasks: Array<{\n    project_name: string;\n    description: string;\n    hours: number;\n  }>;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface TaskLogCreateRequest {\n  userId: string;\n  date: string;\n  totalHours: number;\n  tasks: Array<{\n    project_name: string;\n    description: string;\n    hours: number;\n  }>;\n}\n\nclass TimesheetService {\n  /**\n   * Get all task logs\n   */\n  async getTaskLogs(userId?: string, startDate?: string, endDate?: string, projectName?: string): Promise<ApiResponse<{ taskLogs: TaskLogResponse[] }>> {\n    try {\n      const params = new URLSearchParams();\n      if (userId) params.append('userId', userId);\n      if (startDate) params.append('startDate', startDate);\n      if (endDate) params.append('endDate', endDate);\n      if (projectName) params.append('project_name', projectName);\n      \n      const response = await apiClient.get<ApiResponse<{ taskLogs: TaskLogResponse[] }>>(`/tasklogs?${params.toString()}`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.response?.data?.message || 'Failed to fetch task logs');\n    }\n  }\n\n  /**\n   * Get single task log by user ID and date\n   */\n  async getTaskLogByUserAndDate(userId: string, date: string): Promise<ApiResponse<{ taskLog: TaskLogResponse }>> {\n    try {\n      const params = new URLSearchParams({ userId, date });\n      const response = await apiClient.get<ApiResponse<{ taskLog: TaskLogResponse }>>(`/tasklogs/single?${params.toString()}`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.response?.data?.message || 'Failed to fetch task log');\n    }\n  }\n\n  /**\n   * Create or update task log\n   */\n  async createTaskLog(taskLogData: TaskLogCreateRequest): Promise<ApiResponse<{ taskLog: TaskLogResponse }>> {\n    try {\n      const response = await apiClient.post<ApiResponse<{ taskLog: TaskLogResponse }>>('/tasklogs', taskLogData);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.response?.data?.message || 'Failed to create task log');\n    }\n  }\n\n  // Note: The backend API doesn't have separate update/delete endpoints\n  // Task logs are created or updated via the POST /tasklogs endpoint\n\n  /**\n   * Get task logs by employee with date range filtering\n   * This uses the main /tasklogs endpoint with userId filter\n   */\n  async getTaskLogsByEmployee(\n    employeeId: string, \n    startDate?: string, \n    endDate?: string\n  ): Promise<ApiResponse<{ taskLogs: TaskLogResponse[] }>> {\n    try {\n      return await this.getTaskLogs(employeeId, startDate, endDate);\n    } catch (error: any) {\n      throw new Error(error.response?.data?.message || 'Failed to fetch employee task logs');\n    }\n  }\n\n  /**\n   * Get task logs by project name\n   */\n  async getTaskLogsByProject(projectName: string, startDate?: string, endDate?: string): Promise<ApiResponse<{ taskLogs: TaskLogResponse[] }>> {\n    try {\n      return await this.getTaskLogs(undefined, startDate, endDate, projectName);\n    } catch (error: any) {\n      throw new Error(error.response?.data?.message || 'Failed to fetch project task logs');\n    }\n  }\n}\n\nexport const timesheetService = new TimesheetService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}