{"ast":null,"code":"import apiClient from '../../config/axios';\n\n// User interface based on API documentation\n\nclass UserService {\n  /**\n   * Get all users (Admin only according to API docs)\n   */\n  async getUsers() {\n    try {\n      const response = await apiClient.get('/users');\n      return response.data;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Failed to fetch users');\n    }\n  }\n\n  /**\n   * Create new user (Admin only)\n   */\n  async createUser(userData) {\n    try {\n      const response = await apiClient.post('/users', userData);\n      return response.data;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Failed to create user');\n    }\n  }\n\n  /**\n   * Update user password (Admin only)\n   */\n  async updateUserPassword(id, password) {\n    try {\n      const response = await apiClient.put(`/users/${id}/password`, {\n        password\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Failed to update user password');\n    }\n  }\n\n  /**\n   * Delete user (Admin only)\n   */\n  async deleteUser(id) {\n    try {\n      const response = await apiClient.delete(`/users/${id}`);\n      return response.data;\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      throw new Error(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Failed to delete user');\n    }\n  }\n}\nexport const userService = new UserService();","map":{"version":3,"names":["apiClient","UserService","getUsers","response","get","data","error","_error$response","_error$response$data","Error","message","createUser","userData","post","_error$response2","_error$response2$data","updateUserPassword","id","password","put","_error$response3","_error$response3$data","deleteUser","delete","_error$response4","_error$response4$data","userService"],"sources":["/Users/lapteck/Developer/Company/Timesheet/Front End TS/src/services/users/users.service.ts"],"sourcesContent":["import apiClient from '../../config/axios';\nimport { ApiResponse } from '../../types';\n\n// User interface based on API documentation\nexport interface User {\n  id: string;\n  name: string;\n  email: string;\n  role: 'QA' | 'DESIGN' | 'DEV' | 'PM' | 'Admin';\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface CreateUserRequest {\n  name: string;\n  email: string;\n  password: string;\n  role: 'QA' | 'DESIGN' | 'DEV' | 'PM' | 'Admin';\n}\n\nclass UserService {\n  /**\n   * Get all users (Admin only according to API docs)\n   */\n  async getUsers(): Promise<ApiResponse<{ users: User[] }>> {\n    try {\n      const response = await apiClient.get<ApiResponse<{ users: User[] }>>('/users');\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.response?.data?.message || 'Failed to fetch users');\n    }\n  }\n\n  /**\n   * Create new user (Admin only)\n   */\n  async createUser(userData: CreateUserRequest): Promise<ApiResponse<{ user: User }>> {\n    try {\n      const response = await apiClient.post<ApiResponse<{ user: User }>>('/users', userData);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.response?.data?.message || 'Failed to create user');\n    }\n  }\n\n  /**\n   * Update user password (Admin only)\n   */\n  async updateUserPassword(id: string, password: string): Promise<ApiResponse<{ user: User }>> {\n    try {\n      const response = await apiClient.put<ApiResponse<{ user: User }>>(`/users/${id}/password`, { password });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.response?.data?.message || 'Failed to update user password');\n    }\n  }\n\n  /**\n   * Delete user (Admin only)\n   */\n  async deleteUser(id: string): Promise<ApiResponse<{ user: User }>> {\n    try {\n      const response = await apiClient.delete<ApiResponse<{ user: User }>>(`/users/${id}`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.response?.data?.message || 'Failed to delete user');\n    }\n  }\n}\n\nexport const userService = new UserService();"],"mappings":"AAAA,OAAOA,SAAS,MAAM,oBAAoB;;AAG1C;;AAiBA,MAAMC,WAAW,CAAC;EAChB;AACF;AACA;EACE,MAAMC,QAAQA,CAAA,EAA4C;IACxD,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMH,SAAS,CAACI,GAAG,CAAiC,QAAQ,CAAC;MAC9E,OAAOD,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAU,EAAE;MAAA,IAAAC,eAAA,EAAAC,oBAAA;MACnB,MAAM,IAAIC,KAAK,CAAC,EAAAF,eAAA,GAAAD,KAAK,CAACH,QAAQ,cAAAI,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBF,IAAI,cAAAG,oBAAA,uBAApBA,oBAAA,CAAsBE,OAAO,KAAI,uBAAuB,CAAC;IAC3E;EACF;;EAEA;AACF;AACA;EACE,MAAMC,UAAUA,CAACC,QAA2B,EAAwC;IAClF,IAAI;MACF,MAAMT,QAAQ,GAAG,MAAMH,SAAS,CAACa,IAAI,CAA8B,QAAQ,EAAED,QAAQ,CAAC;MACtF,OAAOT,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAU,EAAE;MAAA,IAAAQ,gBAAA,EAAAC,qBAAA;MACnB,MAAM,IAAIN,KAAK,CAAC,EAAAK,gBAAA,GAAAR,KAAK,CAACH,QAAQ,cAAAW,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBT,IAAI,cAAAU,qBAAA,uBAApBA,qBAAA,CAAsBL,OAAO,KAAI,uBAAuB,CAAC;IAC3E;EACF;;EAEA;AACF;AACA;EACE,MAAMM,kBAAkBA,CAACC,EAAU,EAAEC,QAAgB,EAAwC;IAC3F,IAAI;MACF,MAAMf,QAAQ,GAAG,MAAMH,SAAS,CAACmB,GAAG,CAA8B,UAAUF,EAAE,WAAW,EAAE;QAAEC;MAAS,CAAC,CAAC;MACxG,OAAOf,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAU,EAAE;MAAA,IAAAc,gBAAA,EAAAC,qBAAA;MACnB,MAAM,IAAIZ,KAAK,CAAC,EAAAW,gBAAA,GAAAd,KAAK,CAACH,QAAQ,cAAAiB,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBf,IAAI,cAAAgB,qBAAA,uBAApBA,qBAAA,CAAsBX,OAAO,KAAI,gCAAgC,CAAC;IACpF;EACF;;EAEA;AACF;AACA;EACE,MAAMY,UAAUA,CAACL,EAAU,EAAwC;IACjE,IAAI;MACF,MAAMd,QAAQ,GAAG,MAAMH,SAAS,CAACuB,MAAM,CAA8B,UAAUN,EAAE,EAAE,CAAC;MACpF,OAAOd,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAU,EAAE;MAAA,IAAAkB,gBAAA,EAAAC,qBAAA;MACnB,MAAM,IAAIhB,KAAK,CAAC,EAAAe,gBAAA,GAAAlB,KAAK,CAACH,QAAQ,cAAAqB,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBnB,IAAI,cAAAoB,qBAAA,uBAApBA,qBAAA,CAAsBf,OAAO,KAAI,uBAAuB,CAAC;IAC3E;EACF;AACF;AAEA,OAAO,MAAMgB,WAAW,GAAG,IAAIzB,WAAW,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}