{"ast":null,"code":"import { clsx } from 'clsx';\n\n// Utility function to merge class names\nexport function cn(...inputs) {\n  return clsx(inputs);\n}\n\n// Format date to Excel-like format\nexport function formatDate(date) {\n  const d = new Date(date);\n  return d.toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric'\n  });\n}\n\n// Format date and time\nexport function formatDateTime(date) {\n  const d = new Date(date);\n  return d.toLocaleString('en-US', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit'\n  });\n}\n\n// Format relative time (e.g., \"2 hours ago\")\nexport function formatRelativeTime(date) {\n  const now = new Date();\n  const d = new Date(date);\n  const diffInSeconds = Math.floor((now.getTime() - d.getTime()) / 1000);\n  if (diffInSeconds < 60) return 'Just now';\n  if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)} minutes ago`;\n  if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)} hours ago`;\n  if (diffInSeconds < 2592000) return `${Math.floor(diffInSeconds / 86400)} days ago`;\n  return formatDate(d);\n}\n\n// Get status color for tasks\nexport function getStatusColor(status) {\n  const colors = {\n    pending: 'text-yellow-600 bg-yellow-100',\n    'in-progress': 'text-blue-600 bg-blue-100',\n    completed: 'text-green-600 bg-green-100',\n    cancelled: 'text-red-600 bg-red-100'\n  };\n  return colors[status] || 'text-gray-600 bg-gray-100';\n}\n\n// Get priority color for tasks\nexport function getPriorityColor(priority) {\n  const colors = {\n    low: 'text-gray-600 bg-gray-100',\n    medium: 'text-yellow-600 bg-yellow-100',\n    high: 'text-orange-600 bg-orange-100',\n    urgent: 'text-red-600 bg-red-100'\n  };\n  return colors[priority] || 'text-gray-600 bg-gray-100';\n}\n\n// Debounce function for search inputs\nexport function debounce(func, wait) {\n  let timeout;\n  return (...args) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func(...args), wait);\n  };\n}\n\n// Generate random ID\nexport function generateId() {\n  return Math.random().toString(36).substr(2, 9);\n}\n\n// Validate email format\nexport function isValidEmail(email) {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n}\n\n// Truncate text with ellipsis\nexport function truncateText(text, maxLength) {\n  if (text.length <= maxLength) return text;\n  return text.substr(0, maxLength) + '...';\n}\n\n// Capitalize first letter\nexport function capitalize(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\n// Convert string to slug\nexport function slugify(str) {\n  return str.toLowerCase().replace(/[^\\w\\s-]/g, '').replace(/[\\s_-]+/g, '-').replace(/^-+|-+$/g, '');\n}","map":{"version":3,"names":["clsx","cn","inputs","formatDate","date","d","Date","toLocaleDateString","year","month","day","formatDateTime","toLocaleString","hour","minute","formatRelativeTime","now","diffInSeconds","Math","floor","getTime","getStatusColor","status","colors","pending","completed","cancelled","getPriorityColor","priority","low","medium","high","urgent","debounce","func","wait","timeout","args","clearTimeout","setTimeout","generateId","random","toString","substr","isValidEmail","email","emailRegex","test","truncateText","text","maxLength","length","capitalize","str","charAt","toUpperCase","slice","slugify","toLowerCase","replace"],"sources":["/Users/lapteck/Developer/Company/Timesheet/Front End TS/src/utils/helpers.ts"],"sourcesContent":["import { clsx, type ClassValue } from 'clsx';\n\n// Utility function to merge class names\nexport function cn(...inputs: ClassValue[]) {\n  return clsx(inputs);\n}\n\n// Format date to Excel-like format\nexport function formatDate(date: string | Date): string {\n  const d = new Date(date);\n  return d.toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n  });\n}\n\n// Format date and time\nexport function formatDateTime(date: string | Date): string {\n  const d = new Date(date);\n  return d.toLocaleString('en-US', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit',\n  });\n}\n\n// Format relative time (e.g., \"2 hours ago\")\nexport function formatRelativeTime(date: string | Date): string {\n  const now = new Date();\n  const d = new Date(date);\n  const diffInSeconds = Math.floor((now.getTime() - d.getTime()) / 1000);\n\n  if (diffInSeconds < 60) return 'Just now';\n  if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)} minutes ago`;\n  if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)} hours ago`;\n  if (diffInSeconds < 2592000) return `${Math.floor(diffInSeconds / 86400)} days ago`;\n  \n  return formatDate(d);\n}\n\n// Get status color for tasks\nexport function getStatusColor(status: string): string {\n  const colors = {\n    pending: 'text-yellow-600 bg-yellow-100',\n    'in-progress': 'text-blue-600 bg-blue-100',\n    completed: 'text-green-600 bg-green-100',\n    cancelled: 'text-red-600 bg-red-100',\n  };\n  return colors[status as keyof typeof colors] || 'text-gray-600 bg-gray-100';\n}\n\n// Get priority color for tasks\nexport function getPriorityColor(priority: string): string {\n  const colors = {\n    low: 'text-gray-600 bg-gray-100',\n    medium: 'text-yellow-600 bg-yellow-100',\n    high: 'text-orange-600 bg-orange-100',\n    urgent: 'text-red-600 bg-red-100',\n  };\n  return colors[priority as keyof typeof colors] || 'text-gray-600 bg-gray-100';\n}\n\n// Debounce function for search inputs\nexport function debounce<T extends (...args: any[]) => any>(\n  func: T,\n  wait: number\n): (...args: Parameters<T>) => void {\n  let timeout: NodeJS.Timeout;\n  return (...args: Parameters<T>) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func(...args), wait);\n  };\n}\n\n// Generate random ID\nexport function generateId(): string {\n  return Math.random().toString(36).substr(2, 9);\n}\n\n// Validate email format\nexport function isValidEmail(email: string): boolean {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n}\n\n// Truncate text with ellipsis\nexport function truncateText(text: string, maxLength: number): string {\n  if (text.length <= maxLength) return text;\n  return text.substr(0, maxLength) + '...';\n}\n\n// Capitalize first letter\nexport function capitalize(str: string): string {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\n// Convert string to slug\nexport function slugify(str: string): string {\n  return str\n    .toLowerCase()\n    .replace(/[^\\w\\s-]/g, '')\n    .replace(/[\\s_-]+/g, '-')\n    .replace(/^-+|-+$/g, '');\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}