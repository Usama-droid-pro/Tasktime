{"ast":null,"code":"import apiClient from '../../config/axios';\n\n// Backend API response format for task logs\n\nclass TimesheetService {\n  /**\n   * Get all task logs\n   */\n  async getTaskLogs(userId, startDate, endDate, projectName) {\n    try {\n      const params = new URLSearchParams();\n      if (userId) params.append('userId', userId);\n      if (startDate) params.append('startDate', startDate);\n      if (endDate) params.append('endDate', endDate);\n      if (projectName) params.append('project_name', projectName);\n      const response = await apiClient.get(`/tasklogs?${params.toString()}`);\n      return response.data;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Failed to fetch task logs');\n    }\n  }\n\n  /**\n   * Get single task log by user ID and date\n   */\n  async getTaskLogByUserAndDate(userId, date) {\n    try {\n      const params = new URLSearchParams({\n        userId,\n        date\n      });\n      const response = await apiClient.get(`/tasklogs/single?${params.toString()}`);\n      return response.data;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Failed to fetch task log');\n    }\n  }\n\n  /**\n   * Create or update task log\n   */\n  async createTaskLog(taskLogData) {\n    try {\n      const response = await apiClient.post('/tasklogs', taskLogData);\n      return response.data;\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Failed to create task log');\n    }\n  }\n\n  /**\n   * Update time log\n   */\n  async updateTimeLog(id, timeLogData) {\n    try {\n      const response = await apiClient.put(`/timesheet/${id}`, timeLogData);\n      return response.data;\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      throw new Error(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Failed to update time log');\n    }\n  }\n\n  /**\n   * Delete time log\n   */\n  async deleteTimeLog(id) {\n    try {\n      const response = await apiClient.delete(`/timesheet/${id}`);\n      return response.data;\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      throw new Error(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Failed to delete time log');\n    }\n  }\n\n  /**\n   * Get time logs by employee ID\n   */\n  async getTimeLogsByEmployee(employeeId, page = 1, limit = 10) {\n    try {\n      const response = await apiClient.get(`/timesheet/employee/${employeeId}?page=${page}&limit=${limit}`);\n      return response.data;\n    } catch (error) {\n      var _error$response6, _error$response6$data;\n      throw new Error(((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || 'Failed to fetch employee time logs');\n    }\n  }\n\n  /**\n   * Get time logs by project ID\n   */\n  async getTimeLogsByProject(projectId, page = 1, limit = 10) {\n    try {\n      const response = await apiClient.get(`/timesheet/project/${projectId}?page=${page}&limit=${limit}`);\n      return response.data;\n    } catch (error) {\n      var _error$response7, _error$response7$data;\n      throw new Error(((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.message) || 'Failed to fetch project time logs');\n    }\n  }\n\n  /**\n   * Create multiple time log entries in a batch operation\n   */\n  async createMultipleTimeLogs(timeLogEntries) {\n    try {\n      const response = await apiClient.post('/timesheet/batch', {\n        entries: timeLogEntries\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response8, _error$response8$data;\n      throw new Error(((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : (_error$response8$data = _error$response8.data) === null || _error$response8$data === void 0 ? void 0 : _error$response8$data.message) || 'Failed to create time log entries');\n    }\n  }\n\n  /**\n   * Get time logs by employee with date range filtering\n   */\n  async getTimeLogsByEmployeeAndDateRange(employeeId, startDate, endDate, page = 1, limit = 100) {\n    try {\n      const params = new URLSearchParams({\n        page: page.toString(),\n        limit: limit.toString()\n      });\n      if (startDate) params.append('startDate', startDate);\n      if (endDate) params.append('endDate', endDate);\n      const response = await apiClient.get(`/timesheet/employee/${employeeId}?${params.toString()}`);\n      return response.data;\n    } catch (error) {\n      var _error$response9, _error$response9$data;\n      throw new Error(((_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : (_error$response9$data = _error$response9.data) === null || _error$response9$data === void 0 ? void 0 : _error$response9$data.message) || 'Failed to fetch employee time logs');\n    }\n  }\n}\nexport const timesheetService = new TimesheetService();","map":{"version":3,"names":["apiClient","TimesheetService","getTaskLogs","userId","startDate","endDate","projectName","params","URLSearchParams","append","response","get","toString","data","error","_error$response","_error$response$data","Error","message","getTaskLogByUserAndDate","date","_error$response2","_error$response2$data","createTaskLog","taskLogData","post","_error$response3","_error$response3$data","updateTimeLog","id","timeLogData","put","_error$response4","_error$response4$data","deleteTimeLog","delete","_error$response5","_error$response5$data","getTimeLogsByEmployee","employeeId","page","limit","_error$response6","_error$response6$data","getTimeLogsByProject","projectId","_error$response7","_error$response7$data","createMultipleTimeLogs","timeLogEntries","entries","_error$response8","_error$response8$data","getTimeLogsByEmployeeAndDateRange","_error$response9","_error$response9$data","timesheetService"],"sources":["/Users/obs-fa/Downloads/Front End/src/services/timesheet/timesheet.service.ts"],"sourcesContent":["import apiClient from '../../config/axios';\nimport { TimeLog, CreateTimeLogRequest, UpdateTimeLogRequest, ApiResponse, PaginatedResponse } from '../../types';\n\n// Backend API response format for task logs\ninterface TaskLogResponse {\n  id: string;\n  userId: {\n    id: string;\n    name: string;\n    email: string;\n    role: string;\n  };\n  date: string;\n  totalHours: number;\n  tasks: Array<{\n    project_name: string;\n    description: string;\n    hours: number;\n  }>;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface TaskLogCreateRequest {\n  userId: string;\n  date: string;\n  totalHours: number;\n  tasks: Array<{\n    project_name: string;\n    description: string;\n    hours: number;\n  }>;\n}\n\nclass TimesheetService {\n  /**\n   * Get all task logs\n   */\n  async getTaskLogs(userId?: string, startDate?: string, endDate?: string, projectName?: string): Promise<ApiResponse<{ taskLogs: TaskLogResponse[] }>> {\n    try {\n      const params = new URLSearchParams();\n      if (userId) params.append('userId', userId);\n      if (startDate) params.append('startDate', startDate);\n      if (endDate) params.append('endDate', endDate);\n      if (projectName) params.append('project_name', projectName);\n      \n      const response = await apiClient.get<ApiResponse<{ taskLogs: TaskLogResponse[] }>>(`/tasklogs?${params.toString()}`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.response?.data?.message || 'Failed to fetch task logs');\n    }\n  }\n\n  /**\n   * Get single task log by user ID and date\n   */\n  async getTaskLogByUserAndDate(userId: string, date: string): Promise<ApiResponse<{ taskLog: TaskLogResponse }>> {\n    try {\n      const params = new URLSearchParams({ userId, date });\n      const response = await apiClient.get<ApiResponse<{ taskLog: TaskLogResponse }>>(`/tasklogs/single?${params.toString()}`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.response?.data?.message || 'Failed to fetch task log');\n    }\n  }\n\n  /**\n   * Create or update task log\n   */\n  async createTaskLog(taskLogData: TaskLogCreateRequest): Promise<ApiResponse<{ taskLog: TaskLogResponse }>> {\n    try {\n      const response = await apiClient.post<ApiResponse<{ taskLog: TaskLogResponse }>>('/tasklogs', taskLogData);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.response?.data?.message || 'Failed to create task log');\n    }\n  }\n\n  /**\n   * Update time log\n   */\n  async updateTimeLog(id: string, timeLogData: UpdateTimeLogRequest): Promise<ApiResponse<TimeLog>> {\n    try {\n      const response = await apiClient.put<ApiResponse<TimeLog>>(`/timesheet/${id}`, timeLogData);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.response?.data?.message || 'Failed to update time log');\n    }\n  }\n\n  /**\n   * Delete time log\n   */\n  async deleteTimeLog(id: string): Promise<ApiResponse<void>> {\n    try {\n      const response = await apiClient.delete<ApiResponse<void>>(`/timesheet/${id}`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.response?.data?.message || 'Failed to delete time log');\n    }\n  }\n\n  /**\n   * Get time logs by employee ID\n   */\n  async getTimeLogsByEmployee(employeeId: string, page = 1, limit = 10): Promise<PaginatedResponse<TimeLog>> {\n    try {\n      const response = await apiClient.get<PaginatedResponse<TimeLog>>(`/timesheet/employee/${employeeId}?page=${page}&limit=${limit}`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.response?.data?.message || 'Failed to fetch employee time logs');\n    }\n  }\n\n  /**\n   * Get time logs by project ID\n   */\n  async getTimeLogsByProject(projectId: string, page = 1, limit = 10): Promise<PaginatedResponse<TimeLog>> {\n    try {\n      const response = await apiClient.get<PaginatedResponse<TimeLog>>(`/timesheet/project/${projectId}?page=${page}&limit=${limit}`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.response?.data?.message || 'Failed to fetch project time logs');\n    }\n  }\n\n  /**\n   * Create multiple time log entries in a batch operation\n   */\n  async createMultipleTimeLogs(timeLogEntries: CreateTimeLogRequest[]): Promise<ApiResponse<TimeLog[]>> {\n    try {\n      const response = await apiClient.post<ApiResponse<TimeLog[]>>('/timesheet/batch', { entries: timeLogEntries });\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.response?.data?.message || 'Failed to create time log entries');\n    }\n  }\n\n  /**\n   * Get time logs by employee with date range filtering\n   */\n  async getTimeLogsByEmployeeAndDateRange(\n    employeeId: string, \n    startDate?: string, \n    endDate?: string, \n    page = 1, \n    limit = 100\n  ): Promise<PaginatedResponse<TimeLog>> {\n    try {\n      const params = new URLSearchParams({\n        page: page.toString(),\n        limit: limit.toString()\n      });\n      \n      if (startDate) params.append('startDate', startDate);\n      if (endDate) params.append('endDate', endDate);\n      \n      const response = await apiClient.get<PaginatedResponse<TimeLog>>(\n        `/timesheet/employee/${employeeId}?${params.toString()}`\n      );\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.response?.data?.message || 'Failed to fetch employee time logs');\n    }\n  }\n}\n\nexport const timesheetService = new TimesheetService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}