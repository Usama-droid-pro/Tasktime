{"ast":null,"code":"import apiClient from '../../config/axios';\n\n// Report interfaces based on API documentation\n\nclass ReportsService {\n  /**\n   * Get grand report with role-based hour tracking\n   */\n  async getGrandReport(startDate, endDate) {\n    try {\n      const params = new URLSearchParams();\n      if (startDate) params.append('startDate', startDate);\n      if (endDate) params.append('endDate', endDate);\n      const response = await apiClient.get(`/reports/grand?${params.toString()}`);\n      return response.data;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Failed to fetch grand report');\n    }\n  }\n}\nexport const reportsService = new ReportsService();","map":{"version":3,"names":["apiClient","ReportsService","getGrandReport","startDate","endDate","params","URLSearchParams","append","response","get","toString","data","error","_error$response","_error$response$data","Error","message","reportsService"],"sources":["/Users/lapteck/Developer/Company/Timesheet/Front End TS/src/services/reports/reports.service.ts"],"sourcesContent":["import apiClient from '../../config/axios';\nimport { ApiResponse } from '../../types';\n\n// Report interfaces based on API documentation\nexport interface ProjectReport {\n  project: string;\n  totalHours: number;\n  QA: number;\n  DESIGN: number;\n  DEV: number;\n  PM: number;\n}\n\nexport interface ReportTotals {\n  totalHours: number;\n  QA: number;\n  DESIGN: number;\n  DEV: number;\n  PM: number;\n}\n\nexport interface GrandReportData {\n  projects: ProjectReport[];\n  totals: ReportTotals;\n  dateRange: {\n    startDate: string;\n    endDate: string;\n  };\n  totalProjects: number;\n}\n\nclass ReportsService {\n  /**\n   * Get grand report with role-based hour tracking\n   */\n  async getGrandReport(startDate?: string, endDate?: string): Promise<ApiResponse<GrandReportData>> {\n    try {\n      const params = new URLSearchParams();\n      if (startDate) params.append('startDate', startDate);\n      if (endDate) params.append('endDate', endDate);\n      \n      const response = await apiClient.get<ApiResponse<GrandReportData>>(\n        `/reports/grand?${params.toString()}`\n      );\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.response?.data?.message || 'Failed to fetch grand report');\n    }\n  }\n}\n\nexport const reportsService = new ReportsService();"],"mappings":"AAAA,OAAOA,SAAS,MAAM,oBAAoB;;AAG1C;;AA4BA,MAAMC,cAAc,CAAC;EACnB;AACF;AACA;EACE,MAAMC,cAAcA,CAACC,SAAkB,EAAEC,OAAgB,EAAyC;IAChG,IAAI;MACF,MAAMC,MAAM,GAAG,IAAIC,eAAe,CAAC,CAAC;MACpC,IAAIH,SAAS,EAAEE,MAAM,CAACE,MAAM,CAAC,WAAW,EAAEJ,SAAS,CAAC;MACpD,IAAIC,OAAO,EAAEC,MAAM,CAACE,MAAM,CAAC,SAAS,EAAEH,OAAO,CAAC;MAE9C,MAAMI,QAAQ,GAAG,MAAMR,SAAS,CAACS,GAAG,CAClC,kBAAkBJ,MAAM,CAACK,QAAQ,CAAC,CAAC,EACrC,CAAC;MACD,OAAOF,QAAQ,CAACG,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAU,EAAE;MAAA,IAAAC,eAAA,EAAAC,oBAAA;MACnB,MAAM,IAAIC,KAAK,CAAC,EAAAF,eAAA,GAAAD,KAAK,CAACJ,QAAQ,cAAAK,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBF,IAAI,cAAAG,oBAAA,uBAApBA,oBAAA,CAAsBE,OAAO,KAAI,8BAA8B,CAAC;IAClF;EACF;AACF;AAEA,OAAO,MAAMC,cAAc,GAAG,IAAIhB,cAAc,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}