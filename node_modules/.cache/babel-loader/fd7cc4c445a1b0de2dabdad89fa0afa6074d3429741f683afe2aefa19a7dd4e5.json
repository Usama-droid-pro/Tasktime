{"ast":null,"code":"var _jsxFileName = \"/Users/lapteck/Developer/Company/Timesheet/Front End TS/src/components/ProtectedRoute.tsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  children,\n  requiredRole\n}) => {\n  _s();\n  // Get authentication state from Redux\n  const authState = useSelector(state => state.auth);\n  const {\n    isAuthenticated,\n    user\n  } = authState;\n\n  // Check if user is authenticated\n  if (!isAuthenticated || !user) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Check role-based access if required\n  if (requiredRole && user.role !== requiredRole) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/log-task\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: children\n  }, void 0, false);\n};\n_s(ProtectedRoute, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","Navigate","useSelector","jsxDEV","_jsxDEV","Fragment","_Fragment","ProtectedRoute","children","requiredRole","_s","authState","state","auth","isAuthenticated","user","to","replace","fileName","_jsxFileName","lineNumber","columnNumber","role","_c","$RefreshReg$"],"sources":["/Users/lapteck/Developer/Company/Timesheet/Front End TS/src/components/ProtectedRoute.tsx"],"sourcesContent":["import React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../services/store';\nimport { AuthState } from '../types';\n\ninterface ProtectedRouteProps {\n  children: React.ReactNode;\n  requiredRole?: string;\n}\n\nconst ProtectedRoute: React.FC<ProtectedRouteProps> = ({ \n  children, \n  requiredRole \n}) => {\n  // Get authentication state from Redux\n  const authState = useSelector((state: RootState) => state.auth) as AuthState;\n  const { isAuthenticated, user } = authState;\n  \n  // Check if user is authenticated\n  if (!isAuthenticated || !user) {\n    return <Navigate to=\"/login\" replace />;\n  }\n  \n  // Check role-based access if required\n  if (requiredRole && user.role !== requiredRole) {\n    return <Navigate to=\"/log-task\" replace />;\n  }\n  \n  return <>{children}</>;\n};\n\nexport default ProtectedRoute;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,WAAW,QAAQ,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAS1C,MAAMC,cAA6C,GAAGA,CAAC;EACrDC,QAAQ;EACRC;AACF,CAAC,KAAK;EAAAC,EAAA;EACJ;EACA,MAAMC,SAAS,GAAGT,WAAW,CAAEU,KAAgB,IAAKA,KAAK,CAACC,IAAI,CAAc;EAC5E,MAAM;IAAEC,eAAe;IAAEC;EAAK,CAAC,GAAGJ,SAAS;;EAE3C;EACA,IAAI,CAACG,eAAe,IAAI,CAACC,IAAI,EAAE;IAC7B,oBAAOX,OAAA,CAACH,QAAQ;MAACe,EAAE,EAAC,QAAQ;MAACC,OAAO;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACzC;;EAEA;EACA,IAAIZ,YAAY,IAAIM,IAAI,CAACO,IAAI,KAAKb,YAAY,EAAE;IAC9C,oBAAOL,OAAA,CAACH,QAAQ;MAACe,EAAE,EAAC,WAAW;MAACC,OAAO;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAC5C;EAEA,oBAAOjB,OAAA,CAAAE,SAAA;IAAAE,QAAA,EAAGA;EAAQ,gBAAG,CAAC;AACxB,CAAC;AAACE,EAAA,CAnBIH,cAA6C;EAAA,QAK/BL,WAAW;AAAA;AAAAqB,EAAA,GALzBhB,cAA6C;AAqBnD,eAAeA,cAAc;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}