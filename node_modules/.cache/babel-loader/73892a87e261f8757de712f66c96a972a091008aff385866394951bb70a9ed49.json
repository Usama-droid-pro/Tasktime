{"ast":null,"code":"import apiClient from '../../config/axios';\nclass EmployeeService {\n  /**\n   * Get all employees\n   */\n  async getEmployees(page = 1, limit = 10) {\n    try {\n      const response = await apiClient.get(`/employees?page=${page}&limit=${limit}`);\n      return response.data;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Failed to fetch employees');\n    }\n  }\n\n  /**\n   * Get employee by ID\n   */\n  async getEmployeeById(id) {\n    try {\n      const response = await apiClient.get(`/employees/${id}`);\n      return response.data;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Failed to fetch employee');\n    }\n  }\n\n  /**\n   * Create new employee\n   */\n  async createEmployee(employeeData) {\n    try {\n      const response = await apiClient.post('/employees', employeeData);\n      return response.data;\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Failed to create employee');\n    }\n  }\n\n  /**\n   * Update employee\n   */\n  async updateEmployee(id, employeeData) {\n    try {\n      const response = await apiClient.put(`/employees/${id}`, employeeData);\n      return response.data;\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      throw new Error(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Failed to update employee');\n    }\n  }\n\n  /**\n   * Delete employee\n   */\n  async deleteEmployee(id) {\n    try {\n      const response = await apiClient.delete(`/employees/${id}`);\n      return response.data;\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      throw new Error(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Failed to delete employee');\n    }\n  }\n}\nexport const employeeService = new EmployeeService();","map":{"version":3,"names":["apiClient","EmployeeService","getEmployees","page","limit","response","get","data","error","_error$response","_error$response$data","Error","message","getEmployeeById","id","_error$response2","_error$response2$data","createEmployee","employeeData","post","_error$response3","_error$response3$data","updateEmployee","put","_error$response4","_error$response4$data","deleteEmployee","delete","_error$response5","_error$response5$data","employeeService"],"sources":["/Users/lapteck/Developer/Company/Timesheet/Front End TS/src/services/employees/employees.service.ts"],"sourcesContent":["import apiClient from '../../config/axios';\nimport { Employee, CreateEmployeeRequest, UpdateEmployeeRequest, ApiResponse, PaginatedResponse } from '../../types';\n\nclass EmployeeService {\n  /**\n   * Get all employees\n   */\n  async getEmployees(page = 1, limit = 10): Promise<PaginatedResponse<Employee>> {\n    try {\n      const response = await apiClient.get<PaginatedResponse<Employee>>(`/employees?page=${page}&limit=${limit}`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.response?.data?.message || 'Failed to fetch employees');\n    }\n  }\n\n  /**\n   * Get employee by ID\n   */\n  async getEmployeeById(id: string): Promise<ApiResponse<Employee>> {\n    try {\n      const response = await apiClient.get<ApiResponse<Employee>>(`/employees/${id}`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.response?.data?.message || 'Failed to fetch employee');\n    }\n  }\n\n  /**\n   * Create new employee\n   */\n  async createEmployee(employeeData: CreateEmployeeRequest): Promise<ApiResponse<Employee>> {\n    try {\n      const response = await apiClient.post<ApiResponse<Employee>>('/employees', employeeData);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.response?.data?.message || 'Failed to create employee');\n    }\n  }\n\n  /**\n   * Update employee\n   */\n  async updateEmployee(id: string, employeeData: UpdateEmployeeRequest): Promise<ApiResponse<Employee>> {\n    try {\n      const response = await apiClient.put<ApiResponse<Employee>>(`/employees/${id}`, employeeData);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.response?.data?.message || 'Failed to update employee');\n    }\n  }\n\n  /**\n   * Delete employee\n   */\n  async deleteEmployee(id: string): Promise<ApiResponse<void>> {\n    try {\n      const response = await apiClient.delete<ApiResponse<void>>(`/employees/${id}`);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.response?.data?.message || 'Failed to delete employee');\n    }\n  }\n}\n\nexport const employeeService = new EmployeeService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}