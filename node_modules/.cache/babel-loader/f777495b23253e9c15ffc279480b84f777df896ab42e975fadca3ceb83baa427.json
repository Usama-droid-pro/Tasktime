{"ast":null,"code":"/**\n * Validates that total hours match the sum of individual task hours\n */\nexport const validateTotalHours = (totalHours, tasks) => {\n  const errors = [];\n  const total = parseFloat(totalHours) || 0;\n  const taskHoursSum = tasks.reduce((sum, task) => {\n    const hours = parseFloat(task.hours) || 0;\n    return sum + hours;\n  }, 0);\n\n  // Allow small floating point differences (0.01 hours = 36 seconds)\n  const difference = Math.abs(total - taskHoursSum);\n  if (difference > 0.01) {\n    errors.push(`Total hours (${total}) must match sum of task hours (${taskHoursSum})`);\n  }\n  return {\n    isValid: errors.length === 0,\n    errors\n  };\n};\n\n/**\n * Validates form fields for required data and proper formats\n */\nexport const validateFormFields = form => {\n  const errors = [];\n\n  // Validate date\n  if (!form.date) {\n    errors.push('Date is required');\n  }\n\n  // Validate total hours\n  const totalHours = parseFloat(form.totalHours);\n  if (!form.totalHours || isNaN(totalHours) || totalHours <= 0) {\n    errors.push('Total hours must be a positive number');\n  }\n  if (totalHours > 24) {\n    errors.push('Total hours cannot exceed 24 hours per day');\n  }\n\n  // Validate tasks\n  if (form.tasks.length === 0) {\n    errors.push('At least one task is required');\n  }\n  form.tasks.forEach((task, index) => {\n    if (!task.projectId) {\n      errors.push(`Task ${index + 1}: Project is required`);\n    }\n    if (!task.description.trim()) {\n      errors.push(`Task ${index + 1}: Description is required`);\n    }\n    const hours = parseFloat(task.hours);\n    if (!task.hours || isNaN(hours) || hours <= 0) {\n      errors.push(`Task ${index + 1}: Hours must be a positive number`);\n    }\n    if (hours > 24) {\n      errors.push(`Task ${index + 1}: Hours cannot exceed 24 hours`);\n    }\n  });\n  return {\n    isValid: errors.length === 0,\n    errors\n  };\n};\n\n/**\n * Transforms form data to API format for creating time log entries\n */\nexport const transformFormToTimeLogEntries = (form, employeeId) => {\n  return form.tasks.map(task => {\n    const hours = parseFloat(task.hours);\n    const startTime = '09:00'; // Default start time - could be enhanced later\n    const endHour = 9 + hours;\n    const endTime = `${Math.floor(endHour).toString().padStart(2, '0')}:${Math.round(endHour % 1 * 60).toString().padStart(2, '0')}`;\n    return {\n      employeeId,\n      projectId: task.projectId,\n      date: form.date,\n      startTime,\n      endTime,\n      description: task.description.trim()\n    };\n  });\n};\n\n/**\n * Validates the complete form including field validation and total hours validation\n */\nexport const validateCompleteForm = form => {\n  const fieldValidation = validateFormFields(form);\n  if (!fieldValidation.isValid) {\n    return fieldValidation;\n  }\n  const totalHoursValidation = validateTotalHours(form.totalHours, form.tasks);\n  return {\n    isValid: fieldValidation.isValid && totalHoursValidation.isValid,\n    errors: [...fieldValidation.errors, ...totalHoursValidation.errors]\n  };\n};","map":{"version":3,"names":["validateTotalHours","totalHours","tasks","errors","total","parseFloat","taskHoursSum","reduce","sum","task","hours","difference","Math","abs","push","isValid","length","validateFormFields","form","date","isNaN","forEach","index","projectId","description","trim","transformFormToTimeLogEntries","employeeId","map","startTime","endHour","endTime","floor","toString","padStart","round","validateCompleteForm","fieldValidation","totalHoursValidation"],"sources":["/Users/obs-fa/Downloads/Front End/src/utils/timesheet.utils.ts"],"sourcesContent":["import { CreateTimeLogRequest } from '../types/timesheet.types';\n\nexport interface TaskEntry {\n  id: string;\n  projectId: string;\n  description: string;\n  hours: string;\n}\n\nexport interface DailyLogForm {\n  date: string;\n  totalHours: string;\n  tasks: TaskEntry[];\n}\n\nexport interface ValidationResult {\n  isValid: boolean;\n  errors: string[];\n}\n\n/**\n * Validates that total hours match the sum of individual task hours\n */\nexport const validateTotalHours = (totalHours: string, tasks: TaskEntry[]): ValidationResult => {\n  const errors: string[] = [];\n  \n  const total = parseFloat(totalHours) || 0;\n  const taskHoursSum = tasks.reduce((sum, task) => {\n    const hours = parseFloat(task.hours) || 0;\n    return sum + hours;\n  }, 0);\n  \n  // Allow small floating point differences (0.01 hours = 36 seconds)\n  const difference = Math.abs(total - taskHoursSum);\n  \n  if (difference > 0.01) {\n    errors.push(`Total hours (${total}) must match sum of task hours (${taskHoursSum})`);\n  }\n  \n  return {\n    isValid: errors.length === 0,\n    errors\n  };\n};\n\n/**\n * Validates form fields for required data and proper formats\n */\nexport const validateFormFields = (form: DailyLogForm): ValidationResult => {\n  const errors: string[] = [];\n  \n  // Validate date\n  if (!form.date) {\n    errors.push('Date is required');\n  }\n  \n  // Validate total hours\n  const totalHours = parseFloat(form.totalHours);\n  if (!form.totalHours || isNaN(totalHours) || totalHours <= 0) {\n    errors.push('Total hours must be a positive number');\n  }\n  \n  if (totalHours > 24) {\n    errors.push('Total hours cannot exceed 24 hours per day');\n  }\n  \n  // Validate tasks\n  if (form.tasks.length === 0) {\n    errors.push('At least one task is required');\n  }\n  \n  form.tasks.forEach((task, index) => {\n    if (!task.projectId) {\n      errors.push(`Task ${index + 1}: Project is required`);\n    }\n    \n    if (!task.description.trim()) {\n      errors.push(`Task ${index + 1}: Description is required`);\n    }\n    \n    const hours = parseFloat(task.hours);\n    if (!task.hours || isNaN(hours) || hours <= 0) {\n      errors.push(`Task ${index + 1}: Hours must be a positive number`);\n    }\n    \n    if (hours > 24) {\n      errors.push(`Task ${index + 1}: Hours cannot exceed 24 hours`);\n    }\n  });\n  \n  return {\n    isValid: errors.length === 0,\n    errors\n  };\n};\n\n/**\n * Transforms form data to API format for creating time log entries\n */\nexport const transformFormToTimeLogEntries = (\n  form: DailyLogForm, \n  employeeId: string\n): CreateTimeLogRequest[] => {\n  return form.tasks.map(task => {\n    const hours = parseFloat(task.hours);\n    const startTime = '09:00'; // Default start time - could be enhanced later\n    const endHour = 9 + hours;\n    const endTime = `${Math.floor(endHour).toString().padStart(2, '0')}:${Math.round((endHour % 1) * 60).toString().padStart(2, '0')}`;\n    \n    return {\n      employeeId,\n      projectId: task.projectId,\n      date: form.date,\n      startTime,\n      endTime,\n      description: task.description.trim()\n    };\n  });\n};\n\n/**\n * Validates the complete form including field validation and total hours validation\n */\nexport const validateCompleteForm = (form: DailyLogForm): ValidationResult => {\n  const fieldValidation = validateFormFields(form);\n  \n  if (!fieldValidation.isValid) {\n    return fieldValidation;\n  }\n  \n  const totalHoursValidation = validateTotalHours(form.totalHours, form.tasks);\n  \n  return {\n    isValid: fieldValidation.isValid && totalHoursValidation.isValid,\n    errors: [...fieldValidation.errors, ...totalHoursValidation.errors]\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}