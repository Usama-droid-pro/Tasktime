{"ast":null,"code":"var _jsxFileName = \"/Users/obs-fa/Downloads/Front End/src/components/ViewLogs.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { cn } from '../utils/helpers';\nimport { DUMMY_PROJECTS, DUMMY_USERS } from '../constants/dummyData';\nimport { SAMPLE_LOG_DATA } from '../constants/sampleLogData';\nimport { timesheetService } from '../services';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ViewLogs = () => {\n  _s();\n  const [searchParams] = useSearchParams();\n  const preSelectedUserId = searchParams.get('user');\n  const preSelectedUserName = searchParams.get('name');\n  const [selectedUserId, setSelectedUserId] = useState(preSelectedUserId ? parseInt(preSelectedUserId) : 0);\n\n  // Date range state - default to current month\n  const getCurrentMonthRange = () => {\n    const now = new Date();\n    const firstDay = new Date(now.getFullYear(), now.getMonth(), 1);\n    return {\n      startDate: firstDay.toISOString().split('T')[0],\n      endDate: now.toISOString().split('T')[0]\n    };\n  };\n  const [dateRange, setDateRange] = useState(getCurrentMonthRange());\n\n  // API state management\n  const [timeLogs, setTimeLogs] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [useRealData, setUseRealData] = useState(true); // Toggle between real and dummy data\n\n  // Get all unique user IDs from sample data\n  const allUserIds = Array.from(new Set(SAMPLE_LOG_DATA.map(log => log.userId)));\n\n  // Get all user IDs from DUMMY_USERS (including those without logs)\n  const allUserIdsFromDummy = DUMMY_USERS.map(user => parseInt(user.id));\n\n  // Helper function to get user name from ID\n  const getUserNameById = userId => {\n    const userData = DUMMY_USERS.find(u => u.id === userId.toString());\n    return (userData === null || userData === void 0 ? void 0 : userData.name) || `User ${userId}`;\n  };\n\n  // Fetch time logs from API\n  const fetchTimeLogs = async (employeeId, startDate, endDate) => {\n    if (!useRealData) return; // Skip if using dummy data\n\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await timesheetService.getTimeLogsByEmployeeAndDateRange(employeeId, startDate, endDate);\n      setTimeLogs(response.data || []);\n    } catch (err) {\n      console.error('Failed to fetch time logs:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch time logs');\n      setTimeLogs([]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Set default to first user on component mount (only if no pre-selected user)\n  React.useEffect(() => {\n    if (allUserIds.length > 0 && selectedUserId === 0 && !preSelectedUserId) {\n      setSelectedUserId(allUserIds[0]);\n    }\n  }, [allUserIds, selectedUserId, preSelectedUserId]);\n\n  // Fetch data when employee or date range changes\n  useEffect(() => {\n    if (selectedUserId && useRealData) {\n      fetchTimeLogs(selectedUserId.toString(), dateRange.startDate, dateRange.endDate);\n    }\n  }, [selectedUserId, dateRange, useRealData]);\n\n  // Debug logging for pre-selected user\n  React.useEffect(() => {\n    if (preSelectedUserId) {\n      console.log('Pre-selected user ID:', preSelectedUserId);\n      console.log('Pre-selected user name:', preSelectedUserName);\n      console.log('Available user IDs in sample data:', allUserIds);\n      console.log('Selected user ID:', selectedUserId);\n    }\n  }, [preSelectedUserId, preSelectedUserName, allUserIds, selectedUserId]);\n\n  // Debug when selectedUserId changes\n  React.useEffect(() => {\n    console.log('selectedUserId changed to:', selectedUserId);\n  }, [selectedUserId]);\n\n  // Process real API data into display format\n  const processApiTimeLogs = logs => {\n    const logsByDate = logs.reduce((acc, log) => {\n      const date = log.date;\n      if (!acc[date]) {\n        acc[date] = [];\n      }\n      acc[date].push(log);\n      return acc;\n    }, {});\n    return Object.entries(logsByDate).map(([date, dayLogs]) => {\n      const projectHours = {};\n      const descriptions = [];\n\n      // Initialize all projects with 0 hours\n      projectNames.forEach(projectName => {\n        projectHours[projectName] = 0;\n      });\n      let totalMinutes = 0;\n      dayLogs.forEach(log => {\n        totalMinutes += log.duration;\n        descriptions.push(log.description);\n\n        // Find project name by ID\n        const project = DUMMY_PROJECTS.find(p => p.id === log.projectId);\n        const projectName = (project === null || project === void 0 ? void 0 : project.name) || `Project ${log.projectId}`;\n        if (!projectHours[projectName]) {\n          projectHours[projectName] = 0;\n        }\n        projectHours[projectName] += log.duration / 60; // Convert minutes to hours\n      });\n      const totalHours = totalMinutes / 60;\n      const sumOfProjectHours = Object.values(projectHours).reduce((sum, hours) => sum + hours, 0);\n      const hasValidationError = Math.abs(totalHours - sumOfProjectHours) > 0.01;\n      return {\n        date,\n        totalHours,\n        projectHours,\n        descriptions,\n        hasValidationError,\n        originalLogs: dayLogs\n      };\n    }).sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n  };\n\n  // Filter data by selected user ID only\n  const filteredLogData = selectedUserId ? SAMPLE_LOG_DATA.filter(log => log.userId === selectedUserId) : SAMPLE_LOG_DATA;\n\n  // Debug logging\n  console.log('Selected User ID:', selectedUserId);\n  console.log('All User IDs:', allUserIds);\n  console.log('Filtered Data Count:', filteredLogData.length);\n  console.log('Sample Data Count:', SAMPLE_LOG_DATA.length);\n\n  // Get all unique project names from both DUMMY_PROJECTS and SAMPLE_LOG_DATA\n  const dummyProjectNames = DUMMY_PROJECTS.map(project => project.name);\n  const sampleProjectNames = Array.from(new Set(SAMPLE_LOG_DATA.flatMap(log => log.tasks.map(task => task.projectName))));\n  const projectNames = Array.from(new Set([...dummyProjectNames, ...sampleProjectNames]));\n\n  // Process log data to aggregate by project\n  const processedLogs = filteredLogData.map(log => {\n    const projectHours = {};\n    const descriptions = [];\n\n    // Initialize all projects with 0 hours\n    projectNames.forEach(projectName => {\n      projectHours[projectName] = 0;\n    });\n\n    // Aggregate hours by project and collect descriptions\n    log.tasks.forEach(task => {\n      if (projectHours.hasOwnProperty(task.projectName)) {\n        projectHours[task.projectName] += task.hours;\n      }\n      descriptions.push(task.description);\n    });\n\n    // Calculate sum of all project hours\n    const sumOfProjectHours = Object.values(projectHours).reduce((sum, hours) => sum + hours, 0);\n\n    // Check if total hours doesn't match sum of project hours\n    const hasValidationError = Math.abs(log.totalHours - sumOfProjectHours) > 0.01; // Allow small floating point differences\n    console.log(log.totalHours);\n    console.log(sumOfProjectHours);\n    console.log(hasValidationError);\n    return {\n      ...log,\n      projectHours,\n      whatAccomplished: descriptions.join(', '),\n      sumOfProjectHours,\n      hasValidationError\n    };\n  });\n  console.log('Processed logs for user', selectedUserId, ':', processedLogs);\n\n  // Generate column headers (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z)\n  const columnHeaders = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n  const totalColumns = 3 + projectNames.length; // Date, Total Hours, What Accomplished + Projects\n  const usedColumns = columnHeaders.slice(0, totalColumns);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col h-full\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white border border-excel-border rounded-t-excel p-excel-md\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center justify-between\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-excel-lg font-semibold text-black\",\n          children: [\"Viewing logs for: \", preSelectedUserName || getUserNameById(selectedUserId)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center space-x-excel-md\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-excel-sm text-excel-text-muted\",\n            children: [filteredLogData.length, \" entries\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center space-x-excel-sm\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"date\",\n              value: dateRange.startDate,\n              onChange: e => setDateRange(prev => ({\n                ...prev,\n                startDate: e.target.value\n              })),\n              className: \"px-excel-sm py-excel-xs text-excel-xs border border-excel-border rounded-excel bg-white\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-excel-xs text-excel-text-muted\",\n              children: \"to\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"date\",\n              value: dateRange.endDate,\n              onChange: e => setDateRange(prev => ({\n                ...prev,\n                endDate: e.target.value\n              })),\n              className: \"px-excel-sm py-excel-xs text-excel-xs border border-excel-border rounded-excel bg-white\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setDateRange(getCurrentMonthRange()),\n              className: \"px-excel-sm py-excel-xs text-excel-xs bg-white border border-excel-border rounded-excel hover:bg-excel-hover transition-colors\",\n              title: \"Current Month\",\n              children: \"\\uD83D\\uDCC5\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-1 overflow-auto\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white border-l border-r border-b border-excel-border rounded-b-excel overflow-hidden\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"overflow-x-auto\",\n          children: /*#__PURE__*/_jsxDEV(\"table\", {\n            className: \"w-full border-collapse\",\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n                className: \"bg-excel-gray-100 border-b border-excel-border\",\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  className: \"w-12 h-6 border-r border-excel-border bg-excel-gray-200 text-excel-xs font-medium text-excel-text-muted\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 268,\n                  columnNumber: 15\n                }, this), usedColumns.map((col, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n                  className: cn('h-6 border-r border-excel-border bg-excel-gray-200 text-excel-xs font-medium text-excel-text-muted text-center', index === 0 && 'w-32',\n                  // Date column\n                  index === 1 && 'w-24',\n                  // Total Hours column\n                  index === 2 && 'w-80',\n                  // What Accomplished column\n                  index > 2 && 'w-32' // Project columns\n                  ),\n                  children: col\n                }, col, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 270,\n                  columnNumber: 17\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 267,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n                className: \"bg-excel-header border-b border-excel-border\",\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  className: \"w-12 h-8 border-r border-excel-border bg-excel-gray-200 text-excel-xs font-medium text-excel-text-muted\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 286,\n                  columnNumber: 15\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  className: \"h-8 px-excel-md border-r border-excel-border bg-excel-header text-excel-sm font-medium text-white text-left\",\n                  children: \"Date\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 287,\n                  columnNumber: 15\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  className: \"h-8 px-excel-md border-r border-excel-border bg-excel-header text-excel-sm font-medium text-white text-center\",\n                  children: \"Total Hours\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 290,\n                  columnNumber: 15\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  className: \"h-8 px-excel-md border-r border-excel-border bg-excel-header text-excel-sm font-medium text-white text-left\",\n                  children: \"What Accomplished\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 293,\n                  columnNumber: 15\n                }, this), projectNames.map((projectName, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n                  className: \"h-8 px-excel-md border-r border-excel-border bg-excel-header text-excel-sm font-medium text-white text-center\",\n                  children: projectName\n                }, projectName, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 297,\n                  columnNumber: 17\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 285,\n                columnNumber: 13\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 265,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: processedLogs.length === 0 ? /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: /*#__PURE__*/_jsxDEV(\"td\", {\n                  colSpan: totalColumns + 1,\n                  className: \"h-16 px-excel-md py-excel-sm text-center text-excel-sm text-excel-text-muted bg-excel-gray-50\",\n                  children: selectedUserId && !allUserIds.includes(selectedUserId) ? `No logs available for ${getUserNameById(selectedUserId)}. This user may not have logged any tasks yet.` : 'No logs found for the selected criteria.'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 311,\n                  columnNumber: 17\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 310,\n                columnNumber: 15\n              }, this) : processedLogs.map((log, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                className: cn(\"border-b border-excel-border\", log.hasValidationError ? \"bg-red-50 hover:bg-red-100\" : \"hover:bg-excel-hover\"),\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  className: cn(\"w-4 h-4 border-r border-excel-border text-excel-xs font-medium text-center\", log.hasValidationError ? \"bg-red-100 text-red-600\" : \"bg-excel-gray-200 text-excel-text-muted\"),\n                  children: rowIndex + 1\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 333,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: cn(\"h-8 px-excel-md py-excel-sm border-r border-excel-border text-excel-sm\", log.hasValidationError ? \"bg-red-50 text-red-800\" : \"bg-white text-excel-text-primary\"),\n                  children: new Date(log.date).toLocaleDateString('en-US', {\n                    month: 'short',\n                    day: 'numeric',\n                    year: 'numeric'\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 343,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: cn(\"h-8 px-excel-md py-excel-sm border-r border-excel-border text-excel-sm text-center font-medium\", log.hasValidationError ? \"bg-red-50 text-red-800\" : \"bg-white text-excel-text-primary\"),\n                  children: log.totalHours\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 357,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: cn(\"h-auto px-excel-md py-excel-sm border-r border-excel-border text-excel-sm max-w-80\", log.hasValidationError ? \"bg-red-50 text-red-800\" : \"bg-white text-excel-text-primary\"),\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"break-words whitespace-normal\",\n                    children: log.whatAccomplished\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 373,\n                    columnNumber: 19\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 367,\n                  columnNumber: 17\n                }, this), projectNames.map((projectName, projectIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: cn(\"h-8 px-excel-md py-excel-sm border-r border-excel-border text-excel-sm text-center\", log.hasValidationError ? \"bg-red-50 text-red-800\" : \"bg-white text-excel-text-primary\"),\n                  children: log.projectHours[projectName] > 0 ? `${log.projectHours[projectName]} hrs` : '-'\n                }, projectName, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 380,\n                  columnNumber: 19\n                }, this))]\n              }, log.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 323,\n                columnNumber: 15\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 308,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 7\n        }, this), processedLogs.some(log => log.hasValidationError) && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-red-50 border-t border-red-200 p-excel-md\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center space-x-excel-md text-excel-sm text-red-700\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"font-medium\",\n              children: \"\\u26A0\\uFE0F Validation Alert:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 403,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [processedLogs.filter(log => log.hasValidationError).length, \" row(s) have total hours that don't match the sum of project hours\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 404,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 402,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-excel-gray-100 border-t border-excel-border\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex overflow-x-auto\",\n        children: allUserIdsFromDummy.map(userId => {\n          const hasLogs = allUserIds.includes(userId);\n          return /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              console.log('Clicked user ID:', userId);\n              setSelectedUserId(userId);\n            },\n            className: cn('px-excel-lg py-excel-sm text-excel-sm font-medium border-r border-excel-border whitespace-nowrap transition-colors duration-150', selectedUserId === userId ? 'bg-white text-excel-blue-600 border-b-2 border-excel-blue-500' : 'bg-excel-gray-100 text-excel-text-primary hover:bg-excel-gray-200', !hasLogs && 'opacity-60'),\n            title: !hasLogs ? 'No logs available for this user' : '',\n            children: [getUserNameById(userId), !hasLogs && ' (No logs)']\n          }, userId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 419,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 7\n    }, this)]\n  }, selectedUserId, true, {\n    fileName: _jsxFileName,\n    lineNumber: 221,\n    columnNumber: 5\n  }, this);\n};\n_s(ViewLogs, \"Xh80v+LAxEQjOHDjWt5TC186xBE=\", false, function () {\n  return [useSearchParams];\n});\n_c = ViewLogs;\nexport default ViewLogs;\nvar _c;\n$RefreshReg$(_c, \"ViewLogs\");","map":{"version":3,"names":["React","useState","useEffect","useSearchParams","cn","DUMMY_PROJECTS","DUMMY_USERS","SAMPLE_LOG_DATA","timesheetService","jsxDEV","_jsxDEV","ViewLogs","_s","searchParams","preSelectedUserId","get","preSelectedUserName","selectedUserId","setSelectedUserId","parseInt","getCurrentMonthRange","now","Date","firstDay","getFullYear","getMonth","startDate","toISOString","split","endDate","dateRange","setDateRange","timeLogs","setTimeLogs","isLoading","setIsLoading","error","setError","useRealData","setUseRealData","allUserIds","Array","from","Set","map","log","userId","allUserIdsFromDummy","user","id","getUserNameById","userData","find","u","toString","name","fetchTimeLogs","employeeId","response","getTimeLogsByEmployeeAndDateRange","data","err","console","Error","message","length","processApiTimeLogs","logs","logsByDate","reduce","acc","date","push","Object","entries","dayLogs","projectHours","descriptions","projectNames","forEach","projectName","totalMinutes","duration","description","project","p","projectId","totalHours","sumOfProjectHours","values","sum","hours","hasValidationError","Math","abs","originalLogs","sort","a","b","getTime","filteredLogData","filter","dummyProjectNames","sampleProjectNames","flatMap","tasks","task","processedLogs","hasOwnProperty","whatAccomplished","join","columnHeaders","totalColumns","usedColumns","slice","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","prev","target","onClick","title","col","index","colSpan","includes","rowIndex","toLocaleDateString","month","day","year","projectIndex","some","hasLogs","_c","$RefreshReg$"],"sources":["/Users/obs-fa/Downloads/Front End/src/components/ViewLogs.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { cn } from '../utils/helpers';\nimport { DUMMY_PROJECTS, DUMMY_USERS } from '../constants/dummyData';\nimport { SAMPLE_LOG_DATA, LogEntry } from '../constants/sampleLogData';\nimport { timesheetService } from '../services';\nimport { TimeLog } from '../types/timesheet.types';\nimport { Loader2, AlertCircle } from 'lucide-react';\n\ninterface ProcessedTimeLog {\n  date: string;\n  totalHours: number;\n  projectHours: Record<string, number>;\n  descriptions: string[];\n  hasValidationError: boolean;\n  originalLogs: TimeLog[];\n}\n\nconst ViewLogs: React.FC = () => {\n  const [searchParams] = useSearchParams();\n  const preSelectedUserId = searchParams.get('user');\n  const preSelectedUserName = searchParams.get('name');\n  \n  const [selectedUserId, setSelectedUserId] = useState<number>(\n    preSelectedUserId ? parseInt(preSelectedUserId) : 0\n  );\n  \n  // Date range state - default to current month\n  const getCurrentMonthRange = () => {\n    const now = new Date();\n    const firstDay = new Date(now.getFullYear(), now.getMonth(), 1);\n    return {\n      startDate: firstDay.toISOString().split('T')[0],\n      endDate: now.toISOString().split('T')[0]\n    };\n  };\n  \n  const [dateRange, setDateRange] = useState(getCurrentMonthRange());\n  \n  // API state management\n  const [timeLogs, setTimeLogs] = useState<TimeLog[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [useRealData, setUseRealData] = useState(true); // Toggle between real and dummy data\n  \n  // Get all unique user IDs from sample data\n  const allUserIds = Array.from(new Set(SAMPLE_LOG_DATA.map(log => log.userId)));\n  \n  // Get all user IDs from DUMMY_USERS (including those without logs)\n  const allUserIdsFromDummy = DUMMY_USERS.map(user => parseInt(user.id));\n  \n  // Helper function to get user name from ID\n  const getUserNameById = (userId: number) => {\n    const userData = DUMMY_USERS.find(u => u.id === userId.toString());\n    return userData?.name || `User ${userId}`;\n  };\n  \n  // Fetch time logs from API\n  const fetchTimeLogs = async (employeeId: string, startDate?: string, endDate?: string) => {\n    if (!useRealData) return; // Skip if using dummy data\n    \n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      const response = await timesheetService.getTimeLogsByEmployeeAndDateRange(\n        employeeId, \n        startDate, \n        endDate\n      );\n      setTimeLogs(response.data || []);\n    } catch (err) {\n      console.error('Failed to fetch time logs:', err);\n      setError(err instanceof Error ? err.message : 'Failed to fetch time logs');\n      setTimeLogs([]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Set default to first user on component mount (only if no pre-selected user)\n  React.useEffect(() => {\n    if (allUserIds.length > 0 && selectedUserId === 0 && !preSelectedUserId) {\n      setSelectedUserId(allUserIds[0]);\n    }\n  }, [allUserIds, selectedUserId, preSelectedUserId]);\n\n  // Fetch data when employee or date range changes\n  useEffect(() => {\n    if (selectedUserId && useRealData) {\n      fetchTimeLogs(selectedUserId.toString(), dateRange.startDate, dateRange.endDate);\n    }\n  }, [selectedUserId, dateRange, useRealData]);\n  \n  // Debug logging for pre-selected user\n  React.useEffect(() => {\n    if (preSelectedUserId) {\n      console.log('Pre-selected user ID:', preSelectedUserId);\n      console.log('Pre-selected user name:', preSelectedUserName);\n      console.log('Available user IDs in sample data:', allUserIds);\n      console.log('Selected user ID:', selectedUserId);\n    }\n  }, [preSelectedUserId, preSelectedUserName, allUserIds, selectedUserId]);\n  \n  // Debug when selectedUserId changes\n  React.useEffect(() => {\n    console.log('selectedUserId changed to:', selectedUserId);\n  }, [selectedUserId]);\n  \n  // Process real API data into display format\n  const processApiTimeLogs = (logs: TimeLog[]): ProcessedTimeLog[] => {\n    const logsByDate = logs.reduce((acc, log) => {\n      const date = log.date;\n      if (!acc[date]) {\n        acc[date] = [];\n      }\n      acc[date].push(log);\n      return acc;\n    }, {} as Record<string, TimeLog[]>);\n\n    return Object.entries(logsByDate).map(([date, dayLogs]) => {\n      const projectHours: Record<string, number> = {};\n      const descriptions: string[] = [];\n      \n      // Initialize all projects with 0 hours\n      projectNames.forEach(projectName => {\n        projectHours[projectName] = 0;\n      });\n\n      let totalMinutes = 0;\n      dayLogs.forEach(log => {\n        totalMinutes += log.duration;\n        descriptions.push(log.description);\n        \n        // Find project name by ID\n        const project = DUMMY_PROJECTS.find(p => p.id === log.projectId);\n        const projectName = project?.name || `Project ${log.projectId}`;\n        \n        if (!projectHours[projectName]) {\n          projectHours[projectName] = 0;\n        }\n        projectHours[projectName] += log.duration / 60; // Convert minutes to hours\n      });\n\n      const totalHours = totalMinutes / 60;\n      const sumOfProjectHours = Object.values(projectHours).reduce((sum, hours) => sum + hours, 0);\n      const hasValidationError = Math.abs(totalHours - sumOfProjectHours) > 0.01;\n\n      return {\n        date,\n        totalHours,\n        projectHours,\n        descriptions,\n        hasValidationError,\n        originalLogs: dayLogs\n      };\n    }).sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n  };\n\n  // Filter data by selected user ID only\n  const filteredLogData = selectedUserId \n    ? SAMPLE_LOG_DATA.filter(log => log.userId === selectedUserId)\n    : SAMPLE_LOG_DATA;\n  \n  // Debug logging\n  console.log('Selected User ID:', selectedUserId);\n  console.log('All User IDs:', allUserIds);\n  console.log('Filtered Data Count:', filteredLogData.length);\n  console.log('Sample Data Count:', SAMPLE_LOG_DATA.length);\n  \n  // Get all unique project names from both DUMMY_PROJECTS and SAMPLE_LOG_DATA\n  const dummyProjectNames = DUMMY_PROJECTS.map(project => project.name);\n  const sampleProjectNames = Array.from(new Set(\n    SAMPLE_LOG_DATA.flatMap(log => log.tasks.map(task => task.projectName))\n  ));\n  const projectNames = Array.from(new Set([...dummyProjectNames, ...sampleProjectNames]));\n  \n  // Process log data to aggregate by project\n  const processedLogs = filteredLogData.map(log => {\n    const projectHours: { [key: string]: number } = {};\n    const descriptions: string[] = [];\n    \n    // Initialize all projects with 0 hours\n    projectNames.forEach(projectName => {\n      projectHours[projectName] = 0;\n    });\n    \n    // Aggregate hours by project and collect descriptions\n    log.tasks.forEach(task => {\n      if (projectHours.hasOwnProperty(task.projectName)) {\n        projectHours[task.projectName] += task.hours;\n      }\n      descriptions.push(task.description);\n    });\n    \n    // Calculate sum of all project hours\n    const sumOfProjectHours = Object.values(projectHours).reduce((sum, hours) => sum + hours, 0);\n    \n    // Check if total hours doesn't match sum of project hours\n    const hasValidationError = Math.abs(log.totalHours - sumOfProjectHours) > 0.01; // Allow small floating point differences\n    console.log(log.totalHours)\n    console.log(sumOfProjectHours) \n    console.log(hasValidationError)\n    return {\n      ...log,\n      projectHours,\n      whatAccomplished: descriptions.join(', '),\n      sumOfProjectHours,\n      hasValidationError,\n    };\n  });\n  \n  console.log('Processed logs for user', selectedUserId, ':', processedLogs);\n\n  // Generate column headers (A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z)\n  const columnHeaders = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n  const totalColumns = 3 + projectNames.length; // Date, Total Hours, What Accomplished + Projects\n  const usedColumns = columnHeaders.slice(0, totalColumns);\n\n  return (\n    <div className=\"flex flex-col h-full\" key={selectedUserId}>\n      {/* User Info Header with Date Filter */}\n      <div className=\"bg-white border border-excel-border rounded-t-excel p-excel-md\">\n        <div className=\"flex items-center justify-between\">\n          <h3 className=\"text-excel-lg font-semibold text-black\">\n            Viewing logs for: {preSelectedUserName || getUserNameById(selectedUserId)}\n          </h3>\n          <div className=\"flex items-center space-x-excel-md\">\n            <span className=\"text-excel-sm text-excel-text-muted\">\n              {filteredLogData.length} entries\n            </span>\n            <div className=\"flex items-center space-x-excel-sm\">\n              <input\n                type=\"date\"\n                value={dateRange.startDate}\n                onChange={(e) => setDateRange(prev => ({ ...prev, startDate: e.target.value }))}\n                className=\"px-excel-sm py-excel-xs text-excel-xs border border-excel-border rounded-excel bg-white\"\n              />\n              <span className=\"text-excel-xs text-excel-text-muted\">to</span>\n              <input\n                type=\"date\"\n                value={dateRange.endDate}\n                onChange={(e) => setDateRange(prev => ({ ...prev, endDate: e.target.value }))}\n                className=\"px-excel-sm py-excel-xs text-excel-xs border border-excel-border rounded-excel bg-white\"\n              />\n              <button\n                onClick={() => setDateRange(getCurrentMonthRange())}\n                className=\"px-excel-sm py-excel-xs text-excel-xs bg-white border border-excel-border rounded-excel hover:bg-excel-hover transition-colors\"\n                title=\"Current Month\"\n              >\n                📅\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      {/* Main Table Content */}\n      <div className=\"flex-1 overflow-auto\">\n        <div className=\"bg-white border-l border-r border-b border-excel-border rounded-b-excel overflow-hidden\">\n      {/* Excel-like Table */}\n      <div className=\"overflow-x-auto\">\n        <table className=\"w-full border-collapse\">\n          {/* Column Headers */}\n          <thead>\n            {/* Excel Column Letters Row */}\n            <tr className=\"bg-excel-gray-100 border-b border-excel-border\">\n              <th className=\"w-12 h-6 border-r border-excel-border bg-excel-gray-200 text-excel-xs font-medium text-excel-text-muted\"></th>\n              {usedColumns.map((col, index) => (\n                <th\n                  key={col}\n                  className={cn(\n                    'h-6 border-r border-excel-border bg-excel-gray-200 text-excel-xs font-medium text-excel-text-muted text-center',\n                    index === 0 && 'w-32', // Date column\n                    index === 1 && 'w-24', // Total Hours column\n                    index === 2 && 'w-80', // What Accomplished column\n                    index > 2 && 'w-32' // Project columns\n                  )}\n                >\n                  {col}\n                </th>\n              ))}\n            </tr>\n            {/* Column Names Row */}\n            <tr className=\"bg-excel-header border-b border-excel-border\">\n              <th className=\"w-12 h-8 border-r border-excel-border bg-excel-gray-200 text-excel-xs font-medium text-excel-text-muted\"></th>\n              <th className=\"h-8 px-excel-md border-r border-excel-border bg-excel-header text-excel-sm font-medium text-white text-left\">\n                Date\n              </th>\n              <th className=\"h-8 px-excel-md border-r border-excel-border bg-excel-header text-excel-sm font-medium text-white text-center\">\n                Total Hours\n              </th>\n              <th className=\"h-8 px-excel-md border-r border-excel-border bg-excel-header text-excel-sm font-medium text-white text-left\">\n                What Accomplished\n              </th>\n              {projectNames.map((projectName, index) => (\n                <th\n                  key={projectName}\n                  className=\"h-8 px-excel-md border-r border-excel-border bg-excel-header text-excel-sm font-medium text-white text-center\"\n                >\n                  {projectName}\n                </th>\n              ))}\n            </tr>\n          </thead>\n\n          {/* Data Rows */}\n          <tbody>\n            {processedLogs.length === 0 ? (\n              <tr>\n                <td \n                  colSpan={totalColumns + 1} \n                  className=\"h-16 px-excel-md py-excel-sm text-center text-excel-sm text-excel-text-muted bg-excel-gray-50\"\n                >\n                  {selectedUserId && !allUserIds.includes(selectedUserId) \n                    ? `No logs available for ${getUserNameById(selectedUserId)}. This user may not have logged any tasks yet.`\n                    : 'No logs found for the selected criteria.'\n                  }\n                </td>\n              </tr>\n            ) : (\n              processedLogs.map((log, rowIndex) => (\n              <tr \n                key={log.id} \n                className={cn(\n                  \"border-b border-excel-border\",\n                  log.hasValidationError \n                    ? \"bg-red-50 hover:bg-red-100\" \n                    : \"hover:bg-excel-hover\"\n                )}\n              >\n                {/* Row Number */}\n                <td className={cn(\n                  \"w-4 h-4 border-r border-excel-border text-excel-xs font-medium text-center\",\n                  log.hasValidationError \n                    ? \"bg-red-100 text-red-600\" \n                    : \"bg-excel-gray-200 text-excel-text-muted\"\n                )}>\n                  {rowIndex + 1}\n                </td>\n                \n                {/* Date */}\n                <td className={cn(\n                  \"h-8 px-excel-md py-excel-sm border-r border-excel-border text-excel-sm\",\n                  log.hasValidationError \n                    ? \"bg-red-50 text-red-800\" \n                    : \"bg-white text-excel-text-primary\"\n                )}>\n                  {new Date(log.date).toLocaleDateString('en-US', { \n                    month: 'short', \n                    day: 'numeric',\n                    year: 'numeric' \n                  })}\n                </td>\n                \n                {/* Total Hours */}\n                <td className={cn(\n                  \"h-8 px-excel-md py-excel-sm border-r border-excel-border text-excel-sm text-center font-medium\",\n                  log.hasValidationError \n                    ? \"bg-red-50 text-red-800\" \n                    : \"bg-white text-excel-text-primary\"\n                )}>\n                  {log.totalHours}\n                </td>\n                \n                {/* What Accomplished */}\n                <td className={cn(\n                  \"h-auto px-excel-md py-excel-sm border-r border-excel-border text-excel-sm max-w-80\",\n                  log.hasValidationError \n                    ? \"bg-red-50 text-red-800\" \n                    : \"bg-white text-excel-text-primary\"\n                )}>\n                  <div className=\"break-words whitespace-normal\">\n                    {log.whatAccomplished}\n                  </div>\n                </td>\n                \n                {/* Project Columns */}\n                {projectNames.map((projectName, projectIndex) => (\n                  <td\n                    key={projectName}\n                    className={cn(\n                      \"h-8 px-excel-md py-excel-sm border-r border-excel-border text-excel-sm text-center\",\n                      log.hasValidationError \n                        ? \"bg-red-50 text-red-800\" \n                        : \"bg-white text-excel-text-primary\"\n                    )}\n                  >\n                    {log.projectHours[projectName] > 0 ? `${log.projectHours[projectName]} hrs` : '-'}\n                  </td>\n                ))}\n              </tr>\n            ))\n            )}\n          </tbody>\n        </table>\n      </div>\n\n      {/* Validation Summary */}\n      {processedLogs.some(log => log.hasValidationError) && (\n        <div className=\"bg-red-50 border-t border-red-200 p-excel-md\">\n          <div className=\"flex items-center space-x-excel-md text-excel-sm text-red-700\">\n            <span className=\"font-medium\">⚠️ Validation Alert:</span>\n            <span>\n              {processedLogs.filter(log => log.hasValidationError).length} row(s) have total hours that don't match the sum of project hours\n            </span>\n          </div>\n        </div>\n      )}\n        </div>\n      </div>\n\n      {/* Bottom User Tabs Navigation (Excel-like) */}\n      <div className=\"bg-excel-gray-100 border-t border-excel-border\">\n        <div className=\"flex overflow-x-auto\">\n          {allUserIdsFromDummy.map((userId) => {\n            const hasLogs = allUserIds.includes(userId);\n            return (\n              <button\n                key={userId}\n                onClick={() => {\n                  console.log('Clicked user ID:', userId);\n                  setSelectedUserId(userId);\n                }}\n                className={cn(\n                  'px-excel-lg py-excel-sm text-excel-sm font-medium border-r border-excel-border whitespace-nowrap transition-colors duration-150',\n                  selectedUserId === userId\n                    ? 'bg-white text-excel-blue-600 border-b-2 border-excel-blue-500'\n                    : 'bg-excel-gray-100 text-excel-text-primary hover:bg-excel-gray-200',\n                  !hasLogs && 'opacity-60'\n                )}\n                title={!hasLogs ? 'No logs available for this user' : ''}\n              >\n                {getUserNameById(userId)}\n                {!hasLogs && ' (No logs)'}\n              </button>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ViewLogs;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}