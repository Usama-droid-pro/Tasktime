{"ast":null,"code":"import apiClient from '../../config/axios';\nclass AuthService {\n  /**\n   * Login user with email and password\n   */\n  async login(credentials) {\n    try {\n      const response = await apiClient.post('/auth/login', credentials);\n      return response.data;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Login failed');\n    }\n  }\n\n  /**\n   * Logout user and clear token\n   */\n  logout() {\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('user');\n  }\n\n  /**\n   * Get stored auth token\n   */\n  getToken() {\n    return localStorage.getItem('authToken');\n  }\n\n  /**\n   * Get stored user data\n   */\n  getUser() {\n    const userStr = localStorage.getItem('user');\n    return userStr ? JSON.parse(userStr) : null;\n  }\n\n  /**\n   * Store auth data after successful login\n   */\n  storeAuthData(user, token) {\n    localStorage.setItem('authToken', token);\n    localStorage.setItem('user', JSON.stringify(user));\n  }\n\n  /**\n   * Check if user is authenticated\n   */\n  isAuthenticated() {\n    const token = this.getToken();\n    const user = this.getUser();\n    return !!(token && user);\n  }\n}\nexport const authService = new AuthService();","map":{"version":3,"names":["apiClient","AuthService","login","credentials","response","post","data","error","_error$response","_error$response$data","Error","message","logout","localStorage","removeItem","getToken","getItem","getUser","userStr","JSON","parse","storeAuthData","user","token","setItem","stringify","isAuthenticated","authService"],"sources":["/Users/lapteck/Developer/Company/Timesheet/Front End TS/src/services/auth/auth.service.ts"],"sourcesContent":["import apiClient from '../../config/axios';\nimport { LoginRequest, LoginResponse, ApiResponse } from '../../types';\n\nclass AuthService {\n  /**\n   * Login user with email and password\n   */\n  async login(credentials: LoginRequest): Promise<LoginResponse> {\n    try {\n      const response = await apiClient.post<LoginResponse>('/auth/login', credentials);\n      return response.data;\n    } catch (error: any) {\n      throw new Error(error.response?.data?.message || 'Login failed');\n    }\n  }\n\n  /**\n   * Logout user and clear token\n   */\n  logout(): void {\n    localStorage.removeItem('authToken');\n    localStorage.removeItem('user');\n  }\n\n  /**\n   * Get stored auth token\n   */\n  getToken(): string | null {\n    return localStorage.getItem('authToken');\n  }\n\n  /**\n   * Get stored user data\n   */\n  getUser(): any | null {\n    const userStr = localStorage.getItem('user');\n    return userStr ? JSON.parse(userStr) : null;\n  }\n\n  /**\n   * Store auth data after successful login\n   */\n  storeAuthData(user: any, token: string): void {\n    localStorage.setItem('authToken', token);\n    localStorage.setItem('user', JSON.stringify(user));\n  }\n\n  /**\n   * Check if user is authenticated\n   */\n  isAuthenticated(): boolean {\n    const token = this.getToken();\n    const user = this.getUser();\n    return !!(token && user);\n  }\n}\n\nexport const authService = new AuthService();\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,oBAAoB;AAG1C,MAAMC,WAAW,CAAC;EAChB;AACF;AACA;EACE,MAAMC,KAAKA,CAACC,WAAyB,EAA0B;IAC7D,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMJ,SAAS,CAACK,IAAI,CAAgB,aAAa,EAAEF,WAAW,CAAC;MAChF,OAAOC,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAU,EAAE;MAAA,IAAAC,eAAA,EAAAC,oBAAA;MACnB,MAAM,IAAIC,KAAK,CAAC,EAAAF,eAAA,GAAAD,KAAK,CAACH,QAAQ,cAAAI,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBF,IAAI,cAAAG,oBAAA,uBAApBA,oBAAA,CAAsBE,OAAO,KAAI,cAAc,CAAC;IAClE;EACF;;EAEA;AACF;AACA;EACEC,MAAMA,CAAA,EAAS;IACbC,YAAY,CAACC,UAAU,CAAC,WAAW,CAAC;IACpCD,YAAY,CAACC,UAAU,CAAC,MAAM,CAAC;EACjC;;EAEA;AACF;AACA;EACEC,QAAQA,CAAA,EAAkB;IACxB,OAAOF,YAAY,CAACG,OAAO,CAAC,WAAW,CAAC;EAC1C;;EAEA;AACF;AACA;EACEC,OAAOA,CAAA,EAAe;IACpB,MAAMC,OAAO,GAAGL,YAAY,CAACG,OAAO,CAAC,MAAM,CAAC;IAC5C,OAAOE,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACF,OAAO,CAAC,GAAG,IAAI;EAC7C;;EAEA;AACF;AACA;EACEG,aAAaA,CAACC,IAAS,EAAEC,KAAa,EAAQ;IAC5CV,YAAY,CAACW,OAAO,CAAC,WAAW,EAAED,KAAK,CAAC;IACxCV,YAAY,CAACW,OAAO,CAAC,MAAM,EAAEL,IAAI,CAACM,SAAS,CAACH,IAAI,CAAC,CAAC;EACpD;;EAEA;AACF;AACA;EACEI,eAAeA,CAAA,EAAY;IACzB,MAAMH,KAAK,GAAG,IAAI,CAACR,QAAQ,CAAC,CAAC;IAC7B,MAAMO,IAAI,GAAG,IAAI,CAACL,OAAO,CAAC,CAAC;IAC3B,OAAO,CAAC,EAAEM,KAAK,IAAID,IAAI,CAAC;EAC1B;AACF;AAEA,OAAO,MAAMK,WAAW,GAAG,IAAI1B,WAAW,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}